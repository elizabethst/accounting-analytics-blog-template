{
  "hash": "a2861a1cd4602a66f21ee4e2a5c1eff3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"7: Regression Analysis for Financial Forecasting\"\ndate: today\nexecute: \n  eval: false # set to true \n  message: false\n  warning: false\n---\n\n## Executive Summary\n\n*Write a 2-3 sentence summary of your regression analysis findings, including the most important predictors identified and the accuracy of your models. Complete this section after finishing the assignment.*\n\n---\n\n## Introduction\n\nAs an accounting professional, you need to forecast financial outcomes and identify unusual patterns that may require investigation. Regression analysis helps accountants:\n\n- Predict future revenues based on business drivers\n- Forecast expenses for budgeting purposes\n- Identify transactions that deviate from expected patterns\n- Perform analytical procedures during audits\n\nIn this blog post, you will:\n\n- Build regression models to forecast revenue and expenses\n- Validate models using proper train/test splits\n- Identify outliers for audit investigation\n- Create flexible budgets based on regression results\n\n## Setup and Load Libraries\n\n### Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages we need - matching the slides\nlibrary(tidyverse)    # For data manipulation\nlibrary(tidymodels)   # For modeling\nlibrary(scales)       # For formatting numbers\nlibrary(gt)           # For nice tables\nlibrary(patchwork)    # For combining plots\n\n# Set preferences\ntheme_set(theme_minimal())  # Clean plots\ntidymodels_prefer()        # Prefer tidymodels functions\noptions(scipen = 999)      # No scientific notation\nset.seed(2027)             # Reproducible results\n```\n:::\n\n\n### Load and Explore the Data\n<!-- TODO: add data to data   -->\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the financial data\nfinancial_data <- read_csv(\"../data/07_company_financial_data.csv\")\n\n# Display structure of the data\nglimpse(financial_data)\n\n# Basic summary statistics\nsummary(financial_data)\n```\n:::\n\n\n## Initial Data Exploration\n\n### Revenue and Expense Trends\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize revenue over time\nfinancial_data |>\n  ggplot(aes(x = month_date, y = revenue)) +\n  geom_line(color = \"darkblue\") +\n  geom_point(color = \"darkblue\") +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"Monthly Revenue Trend\",\n    subtitle = \"_____\", #Identify patterns and potential seasonality\n    x = \"Month\",\n    y = \"Revenue\"\n  )\n```\n:::\n\n\n### Relationship Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore relationships between variables\n# Example: Revenue vs Marketing Spend\nfinancial_data |>\n  ggplot(aes(x = _____, y = _____)) +  # Fill in variables\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") +\n  scale_x_continuous(labels = _____) +  # Format appropriately\n  scale_y_continuous(labels = _____) +  # Format appropriately\n  labs(\n    title = \"Relationship Between _____ and _____\",\n    x = \"_____\",\n    y = \"_____\"\n  )\n```\n:::\n\n\n## Revenue Forecasting Model\n\n### Step 1: Prepare Data for Modeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create features for revenue model\nrevenue_data <- financial_data |>\n  select(\n    revenue,           # Target variable\n    _____,            # Predictor 1 (e.g., marketing_spend)\n    _____,            # Predictor 2 (e.g., customer_count)\n    month_num            # Month \n  ) |>\n  drop_na()  # Remove any missing values\n\n# Split the data (following slides approach)\nset.seed(2027)\nrevenue_split <- initial_split(_____, prop = _____, strata = revenue)\nrevenue_train <- training(_____)\nrevenue_test <- testing(_____)\n\n# Check the split\ntibble(\n  Dataset = c(\"Training\", \"Testing\", \"Total\"),\n  Observations = c(nrow(revenue_train), nrow(revenue_test), nrow(revenue_data))\n) |>\n  gt() |>\n  tab_header(title = \"Data Split Summary\")\n```\n:::\n\n\n### Step 2: Build and Fit Revenue Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create model specification\nrevenue_spec <- linear_reg() |>\n  set_engine(\"_____\") |>      # Which engine?\n  set_mode(\"_____\")           # Which mode?\n\n# Fit the model\nrevenue_fit <- revenue_spec |>\n  fit(_____ ~ _____, data = _____)  # Complete the formula\n\n# Display model coefficients\nrevenue_fit |>\n  tidy() |>\n  gt() |>\n  tab_header(title = \"Revenue Model Coefficients\") |>\n  fmt_number(columns = where(is.numeric), decimals = 2) |>\n  fmt_currency(columns = estimate)\n```\n:::\n\n\n### Step 3: Evaluate Revenue Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make predictions on test set\nrevenue_results <- revenue_fit |>\n  augment(_____)  # Which dataset?\n\n# Calculate performance metrics\nrevenue_metrics <- bind_rows(\n  revenue_results |>\n    metrics(truth = _____, estimate = _____),  # Fill in columns\n  revenue_results |>\n    mape(truth = _____, estimate = _____)      # Fill in columns\n)\n\n# Display metrics with interpretation\nrevenue_metrics |>\n  mutate(\n    interpretation = case_when(\n      .metric == \"rmse\" ~ \"Average prediction error\",\n      .metric == \"rsq\" ~ \"Variance explained\",\n      .metric == \"mae\" ~ \"Average absolute error\",\n      .metric == \"mape\" ~ \"Mean absolute percentage error\"\n    )\n  ) |>\n  gt() |>\n  tab_header(title = \"Revenue Model Performance\")\n```\n:::\n\n\n### Step 4: Revenue Predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create scenarios for prediction\nrevenue_scenarios <- tibble(\n  scenario = c(\"Conservative\", \"Base Case\", \"Optimistic\"),\n  marketing_spend = c(_____, _____, _____),    # Fill in values\n  customer_count = c(_____, _____, _____),     # Fill in values\n  # Add other predictors as needed\n)\n\n# Make predictions\nrevenue_predictions <- revenue_fit |>\n  augment(_____) |>  # Which data?\n  select(scenario, _____, .pred) |>  # Select relevant columns\n  gt() |>\n  tab_header(title = \"Revenue Forecast Scenarios\") |>\n  fmt_currency(columns = c(_____, .pred))  # Format columns\n\nrevenue_predictions\n```\n:::\n\n\n## Expense Analysis Model\n\n### Step 1: Prepare Expense Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create expense analysis dataset\nexpense_data <- financial_data |>\n  select(\n    operating_expenses,    # Target variable\n    _____,                # Predictor 1 (e.g., production_volume)\n    _____,                # Predictor 2 (e.g., employee_count)\n    month_num                # Month\n  ) |>\n  drop_na()\n\n# Split the data\nset.seed(2027)\nexpense_split <- initial_split(_____, prop = _____, strata = operating_expenses)\nexpense_train <- training(_____)\nexpense_test <- testing(_____)\n```\n:::\n\n\n### Step 2: Build Expense Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit expense model\nexpense_fit <- linear_reg() |>\n  set_engine(\"lm\") |>\n  set_mode(\"regression\") |>\n  fit(_____ ~ _____, data = _____)  # Complete formula\n\n# Extract fixed and variable cost components\nexpense_fit |>\n  tidy() |>\n  mutate(\n    cost_type = case_when(\n      term == \"(Intercept)\" ~ \"Fixed Costs\",\n      TRUE ~ paste(\"Variable Cost per\", term)\n    )\n  ) |>\n  select(cost_type, estimate) |>\n  gt() |>\n  tab_header(title = \"Cost Structure Analysis\") |>\n  fmt_currency(columns = estimate)\n```\n:::\n\n\n### Step 3: Create Flexible Budget\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create flexible budget for different activity levels\nactivity_levels <- tibble(\n  activity_level = c(\"Low (70%)\", \"Normal (100%)\", \"High (130%)\"),\n  production_volume = c(_____, _____, _____),  # Fill in values\n  # Add other relevant drivers\n)\n\n# Generate flexible budget\nflexible_budget <- expense_fit |>\n  augment(_____) |>  # Which data?\n  mutate(\n    # Calculate confidence intervals\n    model_sigma = sigma(expense_fit$fit),\n    .pred_lower = .pred - (1.96 * model_sigma),\n    .pred_upper = .pred + (1.96 * model_sigma)\n  ) |>\n  select(activity_level, production_volume, .pred, .pred_lower, .pred_upper)\n\n# Display flexible budget\nflexible_budget |>\n  gt() |>\n  tab_header(title = \"Flexible Budget for Operating Expenses\") |>\n  fmt_currency(columns = c(.pred, .pred_lower, .pred_upper))\n```\n:::\n\n\n## Audit Application: Analytical Procedures\n\n### Step 1: Build Expected Values Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create model for expected sales based on economic indicators\naudit_data <- financial_data |>\n  select(\n    reported_sales,      # What we're checking\n    economic_index,      # External indicator\n    month_num           # Month\n  ) |>\n  drop_na()\n\n# Use time-based split for audit procedures\naudit_split <- initial_time_split(_____, prop = _____)\naudit_train <- training(_____)\naudit_test <- testing(_____)\n\n# Build expectation model\naudit_model <- linear_reg() |>\n  set_engine(\"lm\") |>\n  set_mode(\"regression\") |>\n  fit(_____ ~ _____, data = _____)\n```\n:::\n\n\n### Step 2: Identify Exceptions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate expectations for all periods\naudit_analysis <- audit_model |>\n  augment(_____) |>  # Use full dataset\n  mutate(\n    difference = _____ - _____,  # Actual - Predicted\n    pct_difference = difference / _____,\n    investigate = abs(pct_difference) > _____  # Set threshold (e.g., 0.05)\n  )\n\n# Identify periods requiring investigation\nexceptions <- audit_analysis |>\n  filter(_____) |>  # Filter for investigations\n  arrange(desc(abs(pct_difference))) |>\n  select(month_num, reported_sales, .pred, pct_difference)\n\n# Display exceptions\nexceptions |>\n  gt() |>\n  tab_header(title = \"Sales Requiring Investigation\") |>\n  fmt_currency(columns = c(reported_sales, .pred)) |>\n  fmt_percent(columns = pct_difference)\n```\n:::\n\n\n### Step 3: Visualize Analytical Review\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create visualization of actual vs expected\naudit_analysis |>\n  ggplot(aes(x = month_num)) +\n  geom_line(aes(y = reported_sales, color = \"Reported\"), size = 1) +\n  geom_line(aes(y = .pred, color = \"Expected\"), size = 1, linetype = \"dashed\") +\n  geom_point(\n    data = filter(audit_analysis, investigate),\n    aes(y = reported_sales),\n    color = \"red\",\n    size = 3\n  ) +\n  scale_y_continuous(labels = dollar_format()) +\n  scale_color_manual(values = c(\"Reported\" = \"darkblue\", \"Expected\" = \"darkgreen\")) +\n  labs(\n    title = \"Analytical Review: Reported vs Expected Sales\",\n    subtitle = \"Red points indicate exceptions requiring investigation\",\n    x = \"Month\",\n    y = \"Sales\",\n    color = NULL\n  )\n```\n:::\n\n\n\n## Key Findings and Recommendations\n\nBased on the regression analysis, complete these insights:\n\n1. **Revenue Model Performance**: The model explained _____% of revenue variance, with _____ being the strongest predictor (coefficient = $_____).\n\n2. **Key Revenue Drivers**:\n   - Every $1,000 increase in _____ leads to $_____ increase in revenue\n   - _____ shows a _____ relationship with revenue\n   - Model MAPE of _____% suggests predictions are within $_____ on average\n\n3. **Expense Insights**:\n   - Fixed costs are estimated at $_____\n   - Variable cost per _____ is $_____\n   - The flexible budget shows expenses ranging from $_____ to $_____ \n\n4. **Audit Findings**:\n   - _____ periods showed significant deviations (>5%)\n   - Largest exception was in _____ with _____% difference\n   - Total value of transactions requiring investigation: $_____\n\n5. **Recommendations**:\n   - Use revenue model for _____-month ahead forecasts\n   - Update expense model quarterly to reflect changing cost structure\n   - Investigate all sales deviations greater than _____% or $_____\n   - Consider additional predictors such as _____ to improve model accuracy. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}