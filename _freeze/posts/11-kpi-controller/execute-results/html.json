{
<<<<<<< HEAD
  "hash": "ae32c84a882cd7d63920021074e70495",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"11: Controller Dashboard\"\ndate: today\nformat: dashboard\nexecute: \n  eval: false # change to true\n  message: false\n  warning: false\n---\n\n\n\n# Compliance Monitoring {.sidebar width=\"25%\"}\n\n## Control Overview\n\n\n::: {.cell}\n\n:::\n\n\n## Upcoming Deadlines\n\n\n::: {.cell}\n\n:::\n\n\n# Financial Reporting\n\n## Row\n\n### Column {width=\"50%\"}\n\n#### Variance Analysis\n\n\n::: {.cell}\n\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Financial Trends\n\n\n::: {.cell}\n\n:::\n\n\n# Process Monitoring\n\n## Row\n\n### Close Progress\n\n\n::: {.cell}\n\n:::\n\n\n## Row\n\n### Task Status Table\n\n\n::: {.cell}\n\n:::\n\n\n# Risk & Controls\n\n## Row {height=\"40%\"}\n\n### Control Status Overview\n\n\n::: {.cell}\n\n:::\n\n\n## Row {height=\"60%\"}\n\n### Column {width=\"50%\"}\n\n#### Exception Report\n\n\n::: {.cell}\n\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Anomaly Alerts\n\n\n::: {.cell}\n\n:::\n\n\n# Insights & Actions\n\n## Key Control Findings\n\nBased on your dashboard analysis, identify the following:\n\n**Compliance Status**:\n\n- SOX control effectiveness: _____% \n- Controls requiring remediation: _____\n- Days until next regulatory filing: _____\n\n**Financial Reporting Quality**:\n\n- Reporting accuracy rate: _____%\n- Material variances identified: _____\n- Average days to close: _____\n\n**Risk Assessment**:\n\n- High-risk journal entries: _____\n- Expense anomalies detected: _____\n- Unreconciled items aging > 30 days: _____\n\n## Recommended Actions\n\nComplete these action items based on your analysis:\n\n**Immediate Actions** (Today):\n\n- Review all journal entries with risk score > _____\n- Investigate expense anomalies in: _____\n- Address control failures in: _____\n\n**This Week**:\n\n- Complete testing for _____ controls\n- Clear reconciling items for accounts: _____\n- Document variance explanations for: _____\n\n**This Month**:\n\n- Implement process improvements to reduce close time to _____ days\n- Update control procedures for: _____\n- Schedule training for: _____",
    "supporting": [
      "11-kpi-controller_files"
    ],
=======
  "hash": "9855ff07ceb7f3db33389c2e1300f53b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"11: Controller Dashboard\"\ndate: today\nformat: \n  dashboard:\n    code-fold: true\nexecute: \n  eval: false # change to true\n  message: false\n  warning: false\n---\n\n\n\n# Compliance Monitoring {.sidebar width=\"25%\"}\n\n## Control Overview\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate control effectiveness\ncontrol_effectiveness <- control_tests |>\n  group_by(control_id) |>\n  _____(\n    total_tests = n(),\n    total_failures = sum(failures),\n    effectiveness_rate = (sum(sample_size) - sum(failures)) / sum(sample_size)\n  ) |>\n  _____(\n    total_controls = n_distinct(sox_controls$control_id),\n    tested_controls = n(),\n    avg_effectiveness = _____(effectiveness_rate)\n  )\n\n# Count open findings\nopen_findings <- control_tests |>\n  _____(status == \"Fail\") |>\n  nrow()\n\n# Days to next filing\nnext_filing <- as_date(\"2027-02-15\")\ntoday = as_date(\"2026-12-15\")\ndays_to_filing <- as.numeric(next_filing - today)\n\n# Create compliance summary metrics\ncompliance_summary <- tribble(\n  ~metric, ~value, ~status,\n  \"SOX Controls Tested\", paste0(control_effectiveness$tested_controls, \"/\", control_effectiveness$total_controls), \"On Track\",\n  \"Controls Effective\", percent(control_effectiveness$avg_effectiveness, accuracy = 0.1), if_else(control_effectiveness$avg_effectiveness > 0.95, \"Good\", \"At Risk\"),\n  \"Open Audit Findings\", as.character(open_findings), if_else(open_findings == 0, \"Good\", \"Review\"),\n  \"Days to Next Filing\", as.character(days_to_filing), \"Normal\"\n)\n\n# Display as simple list\ncompliance_summary |>\n  gt()  |>\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_body(columns = value)\n  )\n```\n:::\n\n\n## Upcoming Deadlines\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create regulatory filing calendar\nfiling_calendar <- tribble(\n  ~filing, ~due_date,\n  \"10-Q Q4\", \"2027-02-15\",\n  \"10-K Annual\", \"2027-03-31\",\n  \"SOX Certification\", \"2027-03-31\",\n  \"Proxy Statement\", \"2027-04-30\"\n) |>\n  mutate(\n    due_date = ymd(due_date),\n    days_remaining = as.numeric(due_date - today)\n  )\n\n# Display calendar\nfiling_calendar |>\n  select(filing, due_date, days_remaining) |>\n  _____() |>\n  tab_header(title = \"Regulatory Calendar\") |>\n  fmt_date(columns = due_date, date_style = 3) |>\n  tab_style(\n    style = cell_fill(color = control_colors[\"high_risk\"]),\n    locations = cells_body(\n      rows = days_remaining < 30\n    )\n  )\n```\n:::\n\n\n# Financial Reporting\n\n## Row\n\n### Column {width=\"50%\"}\n\n#### Variance Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create variance table\nvariance_analysis |>\n  _____(is_material) |>\n  select(account, current_month, budget, budget_variance, budget_variance_pct) |>\n  gt() |>\n  tab_header(\n    title = \"Material Budget Variances\",\n    subtitle = paste(\"As of\", format(today, \"%B %Y\"))\n  ) |>\n  fmt_currency(\n    columns = c(current_month, budget, budget_variance),\n    decimals = 0\n  ) |>\n  fmt_percent(\n    columns = budget_variance_pct,\n    decimals = 1\n  ) |>\n  tab_style(\n    style = cell_fill(color = control_colors[\"high_risk\"]),\n    locations = cells_body(\n      rows = abs(budget_variance_pct) > 0.10\n    )\n  )\n```\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Financial Trends\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create monthly trend data (simulated for past 6 months)\nmonths <- seq(floor_date(today - months(5), \"month\"), \n              floor_date(today, \"month\"), \n              by = \"month\")\n\nmonthly_trends <- expand_grid(\n  month = months,\n  category = c(\"Revenue\", \"Operating Expenses\")\n) |>\n  mutate(\n    actual = case_when(\n      category == \"Revenue\" ~ 1200000 + rnorm(n(), 0, 50000),\n      category == \"Operating Expenses\" ~ -350000 + rnorm(n(), 0, 15000)\n    ),\n    budget = case_when(\n      category == \"Revenue\" ~ 1200000,\n      category == \"Operating Expenses\" ~ -360000\n    )\n  )\n\n# Create trend plot\ntrend_plot <- monthly_trends |>\n  _____(aes(x = month)) +\n  geom_line(aes(y = actual, color = \"Actual\"), size = 2) +\n  geom_line(aes(y = budget, color = \"Budget\"), linetype = \"dashed\", size = 1) +\n  facet_wrap(~ category, scales = \"free_y\", ncol = 1) +\n  scale_y_continuous(labels = dollar_format()) +\n  scale_x_date(date_labels = \"%b %Y\") +\n  scale_color_manual(\n    values = c(\"Actual\" = \"#1976D2\", \"Budget\" = \"#757575\")\n  ) +\n  _____(\n    title = \"Actual vs Budget Trends\",\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) \n\n# Convert to interactive\n_____(trend_plot) |>\n  layout(hovermode = \"x unified\")\n```\n:::\n\n\n# Process Monitoring\n\n## Row\n\n### Close Progress\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge close tasks with progress\nclose_status <- close_tasks |>\n  left_join(close_progress, by = \"task_id\") |>\n  mutate(\n    status = case_when(\n      !is.na(end_time) ~ \"Complete\",\n      !is.na(start_time) ~ \"In Progress\",\n      TRUE ~ \"Not Started\"\n    ),\n    planned_start = case_when(\n      is.na(predecessor) ~ 1,\n      predecessor == 1 ~ 2,\n      predecessor == 4 ~ 4,\n      predecessor == 6 ~ 5,\n      TRUE ~ 3\n    ),\n    planned_end = day_due\n  )\n\n# Create Gantt chart\ngantt_plot <- close_status |>\n  ggplot(aes(y = fct_rev(factor(task_id)))) +\n  geom_segment(\n    aes(x = planned_start - 0.4, xend = planned_end + 0.4,\n        yend = fct_rev(factor(task_id)),\n        color = status),\n    size = 12\n  ) +\n  geom_text(\n    aes(x = (planned_start + planned_end) / 2,\n        label = paste0(\"D\", planned_start, \"-D\", planned_end)),\n    color = \"white\", size = 3, fontface = \"bold\"\n  ) +\n  scale_color_manual(\n    values = c(\n      \"Complete\" = control_colors[[\"effective\"]],\n      \"In Progress\" = \"#2196F3\",\n      \"Not Started\" = control_colors[[\"not_tested\"]]\n    )\n  ) +\n  scale_x_continuous(\n    breaks = 1:8,\n    labels = paste(\"Day\", 1:8)\n  ) +\n  scale_y_discrete(labels = close_tasks$task_name) +\n  labs(\n    title = \"Month-End Close Progress\",\n    subtitle = \"Close Day 3 of 8\",\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) +\n  theme(legend.position = \"bottom\")\n\n# Display plot\n_____\n```\n:::\n\n\n## Row\n\n### Task Status Table\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create detailed task status table\ntask_details <- close_status |>\n  select(\n    Task = task_name,\n    Responsible = responsible,\n    `Due Day` = day_due,\n    Status = status,\n    Issues = issues,\n    `Hours Est.` = hours_estimate,\n    `Hours Actual` = actual_hours\n  ) |>\n  mutate(\n    Efficiency = if_else(\n      !is.na(`Hours Actual`),\n      percent(`Hours Est.` / `Hours Actual`, accuracy = 1),\n      \"-\"\n    ),\n    Issues = replace_na(Issues, \"-\")\n  )\n\n# Create interactive table\n_____(\n  task_details,\n  options = list(\n    dom = 'ft',\n    columnDefs = list(\n      list(className = 'dt-center', targets = 2:7)\n    )\n  ),\n  rownames = FALSE\n) |>\n  formatStyle(\n    \"Status\",\n    backgroundColor = styleEqual(\n      c(\"Complete\", \"In Progress\", \"Not Started\"),\n      c(control_colors[\"effective\"], \"#E3F2FD\", control_colors[\"not_tested\"])\n    )\n  )\n```\n:::\n\n\n# Risk & Controls\n\n## Row {height=\"40%\"}\n\n### Control Status Overview\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate control effectiveness\ncontrol_effectiveness <- control_tests |>\n  # Group control test results by control ID to calculate effectiveness metrics for each control\n  _____(control_id) |>\n  summarise(\n    total_tests = n(),\n    total_failures = sum(failures),\n    effectiveness_rate = (sum(sample_size) - sum(failures)) / sum(sample_size),\n    .groups = \"drop\"\n  ) |>\n  # Join with sox_controls to get control names and details\n  _____(sox_controls, by = \"control_id\") |>\n  mutate(\n    status = case_when(\n      effectiveness_rate >= 0.95 ~ \"Effective\",\n      effectiveness_rate >= 0.90 ~ \"Needs Improvement\",\n      is.na(effectiveness_rate) ~ \"Not Tested\",\n      TRUE ~ \"Ineffective\"\n    )\n  )\n\n# Create control status plot\ncontrol_plot <- control_effectiveness |>\n  ggplot(aes(x = effectiveness_rate, y = control_name, fill = status)) +\n  geom_col() +\n  geom_vline(xintercept = 0.95, linetype = \"dashed\", color = \"red\") +\n  scale_x_continuous(labels = percent_format()) +\n  scale_fill_manual(\n    values = c(\n      \"Effective\" = control_colors[[\"effective\"]],\n      \"Needs Improvement\" = control_colors[[\"needs_improvement\"]],\n      \"Ineffective\" = control_colors[[\"ineffective\"]],\n      \"Not Tested\" = control_colors[[\"not_tested\"]]\n    )\n  ) +\n  labs(\n    title = \"SOX Control Effectiveness\",\n    x = \"Effectiveness Rate\",\n    y = NULL,\n    fill = NULL\n  )\n\n# Convert to interactive\nggplotly(control_plot) |>\n  layout(hovermode = \"y unified\")\n```\n:::\n\n\n## Row {height=\"60%\"}\n\n### Column {width=\"50%\"}\n\n#### Exception Report\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify high-risk entries\nhigh_risk_je <- journal_entries |>\n  _____(\n    days_until_period_end = as.numeric(ymd(\"2026-11-30\") - entry_date)\n  ) |>\n  _____(\n    amount > 50000 |                          # Large amounts\n    hour(entry_time) > 18 |                   # After 6 PM\n    hour(entry_time) < 6 |                    # Before 6 AM\n    wday(entry_date) %in% c(1, 7) |          # Weekends\n    user_id %in% c(\"temp001\", \"admin\") |     # High-risk users\n    str_detect(tolower(description),          # Suspicious keywords\n              \"adjust|correct|reverse\") |\n    account_type %in% c(\"Reserve\", \"Revenue\") # Sensitive accounts\n  ) |>\n  mutate(\n    risk_score = case_when(\n      amount > 100000 ~ 50,\n      TRUE ~ 0\n    ) +\n    _____(\n      hour(entry_time) > 20 | hour(entry_time) < 5 ~ 25,\n      TRUE ~ 0\n    ) +\n    case_when(\n      wday(entry_date) %in% c(1, 7) ~ 25,\n      TRUE ~ 0\n    ) +\n    case_when(\n      user_id %in% c(\"temp001\", \"admin\") ~ 25,\n      TRUE ~ 0\n    ) +\n    case_when(\n      str_detect(tolower(description), \"adjust|correct|reverse\") ~ 15,\n      TRUE ~ 0\n    ) +\n    case_when(\n      account_type %in% c(\"Reserve\", \"Revenue\") ~ 25,\n      TRUE ~ 0\n    ) ,\n    risk_level = case_when(\n      risk_score >= 75 ~ \"High\",\n      risk_score >= 50 ~ \"Medium\",\n      TRUE ~ \"Low\"\n    )\n  ) |>\n  arrange(desc(risk_score)) \n\n# Display exception table\nhigh_risk_je |>\n  select(\n    `Entry ID` = entry_id,\n    Date = entry_date,\n    User = user_id,\n    Amount = amount,\n    Description = description,\n    `Risk Score` = risk_score,\n    `Risk Level` = risk_level\n  ) |>\n  gt() |>\n  tab_header(\n    title = \"High-Risk Journal Entries\",\n    subtitle = \"Exceptions requiring review\"\n  ) |>\n  fmt_currency(columns = Amount, decimals = 0) |>\n  tab_style(\n    style = cell_fill(color = control_colors[\"high_risk\"]),\n    locations = cells_body(\n      columns = `Risk Level`,\n      rows = `Risk Level` == \"High\"\n    )\n  )\n```\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Anomaly Alerts\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate historical baselines (excluding current month)\nnormal_ranges <- historical_expenses |>\n  # Filter out current month to establish historical baseline\n  filter(month < ym(\"2026-12\")) |>\n  # Calculate statistical measures for each expense category\n  group_by(category) |>\n  summarise(\n    mean_amount = mean(amount),              # Historical average\n    sd_amount = sd(amount),                  # Standard deviation\n    lower_bound = mean_amount - 2 * sd_amount,  # 2σ lower control limit\n    upper_bound = mean_amount + 2 * sd_amount,  # 2σ upper control limit\n    .groups = \"drop\"\n  )\n\n# Check current month for anomalies\ncurrent_expenses <- historical_expenses |>\n  # Get current month data only\n  _____(month == ym(\"2026-12\")) |>\n  # Join with historical ranges for comparison\n  _____(normal_ranges, by = \"category\") |>\n  mutate(\n    # Flag values outside 2 standard deviation range as anomalies\n    is_anomaly = amount < lower_bound | amount > upper_bound,\n    # Calculate how many standard deviations from mean\n    deviation = (amount - mean_amount) / sd_amount\n  )\n\n# Create anomaly visualization\nanomaly_plot <- current_expenses |>\n  ggplot(aes(x = category, y = amount)) +\n  # Add error bars showing normal range (±2σ)\n  geom_errorbar(\n    aes(ymin = lower_bound, ymax = upper_bound),\n    width = 0.2, color = \"gray50\", size = 1\n  ) +\n  # Add cross marks at historical mean\n  geom_point(aes(y = mean_amount), shape = 4, size = 3) +\n  # Plot current month values, colored by anomaly status\n  geom_point(aes(color = is_anomaly), size = 5) +\n  # Set colors for normal vs anomalous values\n  scale_color_manual(\n    values = c(\"FALSE\" = control_colors[[\"effective\"]], \n              \"TRUE\" = control_colors[[\"ineffective\"]]),\n    labels = c(\"Normal\", \"Anomaly\")\n  ) +\n  # Format y-axis as currency\n  scale_y_continuous(labels = dollar_format()) +\n  # Flip coordinates for better readability\n  coord_flip() +\n  labs(\n    title = \"Expense Anomaly Detection\",\n    subtitle = \"Current vs. normal range (±2σ)\",\n    x = NULL,\n    y = \"Amount\",\n    color = \"Status\"\n  )\n\n# Display plot\nggplotly(anomaly_plot) |>\n  layout(hovermode = \"y unified\")\n```\n:::\n\n\n# Insights & Actions\n\n## Key Control Findings\n\nBased on your dashboard analysis, identify the following:\n\n**Compliance Status**:\n\n- SOX control effectiveness: _____% \n- Controls requiring remediation: _____\n- Days until next regulatory filing: _____\n\n**Financial Reporting Quality**:\n\n- Reporting accuracy rate: _____%\n- Material variances identified: _____\n- Average days to close: _____\n\n**Risk Assessment**:\n\n- High-risk journal entries: _____\n- Expense anomalies detected: _____\n- Unreconciled items aging > 30 days: _____\n\n## Recommended Actions\n\nComplete these action items based on your analysis:\n\n**Immediate Actions** (Today):\n\n- Review all journal entries with risk score > _____\n- Investigate expense anomalies in: _____\n- Address control failures in: _____\n\n**This Week**:\n\n- Complete testing for _____ controls\n- Clear reconciling items for accounts: _____\n- Document variance explanations for: _____\n\n**This Month**:\n\n- Implement process improvements to reduce close time to _____ days\n- Update control procedures for: _____\n- Schedule training for: _____",
    "supporting": [],
>>>>>>> a872259 (changed eval to false and added format: dashboard for 10-12)
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}