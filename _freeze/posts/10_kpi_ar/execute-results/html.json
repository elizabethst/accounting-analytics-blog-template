{
<<<<<<< HEAD
  "hash": "929fcdceda3fe8c6254a8f0859b1c998",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"10: Accounts Receivable Dashboard\"\ndate: today\nformat: dashboard\nexecute: \n  eval: false # change to true\n  message: false\n  warning: false\n---\n\n\n\n# Executive Summary {.tabset}\n\n## Key Metrics\n\n### Row {height=\"25%\"}\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n### Row {height=\"75%\"}\n\n## Summary Statistics\n\n\n::: {.cell}\n\n:::\n\n\n# Aging Analysis\n\n## Row {height=\"30%\"}\n\n### Aging Summary\n\n\n::: {.cell}\n\n:::\n\n\n## Row {height=\"70%\"}\n\n### Column {width=\"50%\"}\n\n#### Aging Distribution\n\n\n::: {.cell}\n\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Aging by Customer Type\n\n\n::: {.cell}\n\n:::\n\n\n# Customer Analysis\n\n## Row\n\n### Top Customers by Exposure\n\n\n::: {.cell}\n\n:::\n\n\n## Row\n\n### Column {width=\"50%\"}\n\n#### Customer Risk Matrix\n\n\n::: {.cell}\n\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Credit Utilization Analysis\n\n\n::: {.cell}\n\n:::\n\n\n# Collection Trends\n\n## Row\n\n### Column {width=\"50%\"}\n\n#### Collection Performance Over Time\n\n\n::: {.cell}\n\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Payment Behavior Analysis\n\n\n::: {.cell}\n\n:::\n\n\n# Cash Flow Forecast\n\n## Row\n\n### Expected Collections Forecast\n\n\n::: {.cell}\n\n:::\n\n\n## Row\n\n### Collection Probability by Aging\n\n\n::: {.cell}\n\n:::\n\n\n# Insights & Actions\n\n## Key Findings\n\nBased on your dashboard analysis, identify the following insights:\n\n1. **Overall AR Health**:\n   - Current DSO of _____ days compared to target of 45 days\n   - _____% of AR is current (target: 70%+)\n   - Total past due amount: $_____\n\n2. **Customer Concentration Risk**:\n   - Top 5 customers represent _____% of total AR\n   - _____ customers are over their credit limit\n   - Highest risk customer: _____ with $_____ overdue\n\n3. **Collection Performance**:\n   - Average days to collect: _____ days\n   - Collection effectiveness trending up/down\n   - Expected collections next 4 weeks: $_____\n\n## Recommended Actions\n\nComplete these action items based on your analysis:\n\n1. **Immediate Actions** (This Week):\n   - Contact all accounts over _____ days\n   - Review credit limits for customers at >90% utilization\n   - Focus collection efforts on: _____\n\n2. **Short-term Improvements** (This Month):\n   - Implement automated reminders for accounts approaching _____ days\n   - Review payment terms for industries with poor payment history\n   - Target DSO reduction to _____ days\n\n3. **Strategic Initiatives** (This Quarter):\n   - Develop early payment discount program for _____\n   - Revise credit policy for _____ risk customers\n   - Implement _____ to improve collection effectiveness\n",
    "supporting": [
      "10_kpi_ar_files"
    ],
=======
  "hash": "aff7aaf0b9e9aae1b10eeb0a0d91e956",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"10: Accounts Receivable Dashboard\"\ndate: today\nformat: \n  dashboard:\n    code-fold: true\nexecute: \n  eval: false # change to true\n  message: false\n  warning: false\n---\n\n\n\n# Executive Summary {.tabset}\n\n## Key Metrics\n\n### Row {height=\"25%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the AR data\nar_data <- read_rds(\"https://estanny.org/data/10-assignment-ar_data.rds\")\n# Set current date for aging calculations\ncurrent_date <- today()\n\n# Display data structure\nglimpse(ar_data)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate key performance indicators\n\n# Total AR balance\ntotal_ar <- ar_data |>\n  filter(status == \"_____\") |>\n  summarise(total = sum(_____)) |>\n  pull(total)\n\n# Calculate Days Sales Outstanding (DSO)\n# Assume average daily sales for calculation\naverage_daily_sales <- 5000  # You'll need to calculate this from your data\ncurrent_dso <- round(_____ / _____, 1)\n\n# Calculate past due percentage\npast_due_amount <- ar_data |>\n  filter(status == \"Open\" & _____ > 0) |>\n  summarise(total = sum(amount)) |>\n  pull(total)\n\npast_due_percentage <- _____ / _____\n\n# Count of overdue invoices\noverdue_count <- ar_data |>\n  filter(status == \"Open\" & days_overdue > _____) |>\n  nrow()\n\n# Average days to pay (for paid invoices)\navg_days_to_pay <- ar_data |>\n  filter(status == \"_____\") |>\n  summarise(avg_days = mean(_____, na.rm = TRUE)) |>\n  pull(avg_days)\n```\n:::\n\n\n### Row {height=\"75%\"}\n\n## Summary Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create comprehensive AR summary statistics\nsummary_stats <- ar_data |>\n  filter(status == \"_____\") |>\n  summarise(\n    `Total Outstanding AR` = sum(_____),\n    `Number of Open Invoices` = n(),\n    `Average Invoice Amount` = mean(_____),\n    `Median Invoice Amount` = median(_____),\n    `Largest Invoice` = max(_____),\n    `Smallest Invoice` = min(_____),\n    `Total Past Due` = sum(_____[_____ > 0]),\n    `Current (Not Due)` = sum(_____[_____ <= 0])\n  )\n\n# Create summary table using gt\nsummary_stats |>\n  pivot_longer(everything(), names_to = \"Metric\", values_to = \"Value\") |>\n  gt() |>\n  tab_header(\n    title = \"Accounts Receivable Summary\",\n    subtitle = paste(\"As of\", format(current_date, \"%B %d, %Y\"))\n  ) |>\n  fmt_currency(\n    columns = Value,\n    rows = c(1, 3:8),\n    decimals = 0\n  ) |>\n  fmt_number(\n    columns = Value,\n    rows = 2,\n    decimals = 0\n  ) |>\n  cols_label(\n    Metric = \"Metric\",\n    Value = \"Value\"\n  ) |>\n  tab_style(\n    style = cell_fill(color = \"#E3F2FD\"),\n    locations = cells_body(rows = c(1, 7))\n  )\n```\n:::\n\n\n# Aging Analysis\n\n## Row {height=\"30%\"}\n\n### Aging Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create aging buckets for AR analysis\nar_aging <- ar_data |>\n  filter(status == \"_____\") |>\n  mutate(\n    # Calculate days outstanding\n    days_outstanding = as.numeric(current_date - _____),\n    # Calculate days overdue\n    days_overdue = as.numeric(current_date - _____),\n    days_overdue = if_else(days_overdue < 0, 0, days_overdue),\n    # Create aging buckets\n    aging_bucket = case_when(\n      days_overdue == 0 ~ \"Current\",\n      days_overdue <= 30 ~ \"1-30 Days\",\n      days_overdue <= 60 ~ \"31-60 Days\",\n      days_overdue <= 90 ~ \"61-90 Days\",\n      TRUE ~ \"Over 90 Days\"\n    ),\n    # Set factor levels for proper ordering\n    aging_bucket = factor(aging_bucket, \n                         levels = c(\"Current\", \"1-30 Days\", \"31-60 Days\", \n                                   \"61-90 Days\", \"Over 90 Days\"))\n  )\n\n# Create aging summary table\naging_summary <- ar_aging |>\n  group_by(_____) |>\n  summarise(\n    `Invoice Count` = n(),\n    `Total Amount` = sum(_____),\n    `Percentage` = sum(amount) / sum(ar_aging$amount),\n    .groups = \"drop\"\n  )\n\n# Display aging summary with gt\naging_summary |>\n  gt() |>\n  tab_header(\n    title = \"AR Aging Summary\",\n    subtitle = \"Distribution by aging bucket\"\n  ) |>\n  fmt_number(\n    columns = `Invoice Count`,\n    decimals = 0\n  ) |>\n  fmt_currency(\n    columns = `Total Amount`,\n    decimals = 0\n  ) |>\n  fmt_percent(\n    columns = Percentage,\n    decimals = 0 \n  ) |>\n  cols_label(\n    aging_bucket = \"Aging Bucket\"\n  ) |>\n  # Apply conditional formatting based on aging\n  tab_style(\n    style = cell_fill(color = ar_colors[\"current\"]),\n    locations = cells_body(\n      columns = everything(),\n      rows = aging_bucket == \"Current\"\n    )\n  ) |>\n  tab_style(\n    style = cell_fill(color = ar_colors[\"critical\"]),\n    locations = cells_body(\n      columns = everything(),\n      rows = aging_bucket == \"Over 90 Days\"\n    )\n  )\n```\n:::\n\n\n## Row {height=\"70%\"}\n\n### Column {width=\"50%\"}\n\n#### Aging Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create aging distribution bar chart\nindustry_plot <- industry_aging |>\n  ggplot(aes(y = reorder(industry, total, sum), x = total, fill = aging_bucket)) +  \n  geom_col(position = \"stack\") +\n  scale_x_continuous(labels = dollar_format()) +  # Changed to scale_x\n  scale_fill_manual(\n    values = c(\n      \"Current\" = ar_colors[[\"current\"]],\n      \"1-30 Days\" = ar_colors[[\"early\"]],\n      \"31-60 Days\" = ar_colors[[\"moderate\"]],\n      \"61-90 Days\" = ar_colors[[\"late\"]],\n      \"Over 90 Days\" = ar_colors[[\"critical\"]]\n    )\n  ) +\n  labs(\n    title = \"Aging by Industry\",\n    y = NULL,  # Swapped labels\n    x = \"Amount Outstanding\",\n    fill = NULL\n  )\n\n# Convert to interactive plot\nggplotly(aging_plot, tooltip = c(\"x\", \"y\")) |>\n  layout(hovermode = \"x unified\")\n```\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Aging by Customer Type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create aging analysis by customer industry/type\nindustry_aging <- ar_aging |>\n  group_by(_____, _____) |>\n  summarise(total = sum(amount), .groups = \"drop\")\n\n# Create stacked bar chart\nindustry_plot <- industry_aging |>\n  ggplot(aes(x = _____, y = total, fill = aging_bucket)) +\n  geom_col(position = \"stack\") +\n  scale_y_continuous(labels = dollar_format()) +\n  scale_fill_manual(\n    values = c(\n      \"Current\" = ar_colors[\"current\"],\n      \"1-30 Days\" = ar_colors[\"early\"],\n      \"31-60 Days\" = ar_colors[\"moderate\"],\n      \"61-90 Days\" = ar_colors[\"late\"],\n      \"Over 90 Days\" = ar_colors[\"critical\"]\n    )\n  ) +\n  labs(\n    title = \"Aging by Industry\",\n    x = NULL,\n    y = \"Amount Outstanding\",\n    fill = \"Aging Bucket\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to interactive\nggplotly(industry_plot) |>\n  layout(hovermode = \"x unified\")\n```\n:::\n\n\n# Customer Analysis\n\n## Row\n\n### Top Customers by Exposure\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate customer exposure metrics\ncustomer_summary <- ar_aging |>\n  group_by(_____, _____, _____) |>\n  summarise(\n    total_ar = sum(_____),\n    invoice_count = n(),\n    oldest_invoice = min(_____),\n    days_oldest = as.numeric(current_date - oldest_invoice),\n    avg_days_overdue = round(mean(_____, na.rm = TRUE), 0),\n    .groups = \"drop\"\n  ) |>\n  mutate(\n    credit_utilization = _____ / _____,\n    risk_score = case_when(\n      avg_days_overdue > 60 | credit_utilization > 0.9 ~ \"High\",\n      avg_days_overdue > 30 | credit_utilization > 0.7 ~ \"Medium\",\n      TRUE ~ \"Low\"\n    )\n  ) |>\n  arrange(desc(_____)) \n\n# Create interactive customer table\ndatatable(\n  customer_summary |>\n    select(\n      Customer = customer_name,\n      `Total AR` = total_ar,\n      `Credit Limit` = credit_limit,\n      `Utilization %` = credit_utilization,\n      `Invoices` = invoice_count,\n      `Avg Days Overdue` = avg_days_overdue,\n      `Risk` = risk_score\n    ),\n  options = list(\n    pageLength = 10,\n    dom = 'ftip',\n    order = list(list(1, 'desc'))\n  ),\n  rownames = FALSE\n) |>\n  formatCurrency(c(\"Total AR\", \"Credit Limit\"), digits = 0) |>\n  formatPercentage(\"Utilization %\", digits = 0) |>\n  formatStyle(\n    \"Risk\",\n    backgroundColor = styleEqual(\n      c(\"Low\", \"Medium\", \"High\"),\n      c(\"#C8E6C9\", \"#FFF3E0\", \"#FFCDD2\")\n    )\n  )\n```\n:::\n\n\n## Row\n\n### Column {width=\"50%\"}\n\n#### Customer Risk Matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create risk matrix scatter plot\nrisk_data <- customer_summary |>\n  slice_head(n = 20)\n\nrisk_plot <- risk_data |>\n  ggplot(aes(\n    x = avg_days_overdue, \n    y = total_ar,\n    color = risk_score,\n    size = credit_utilization,\n    text = paste(\n      \"Customer:\", customer_name,\n      \"<br>Total AR:\", dollar(total_ar),\n      \"<br>Avg Days Overdue:\", avg_days_overdue,\n      \"<br>Utilization:\", percent(credit_utilization)\n    )\n  )) +\n  geom_point(alpha = 0.7) +\n  scale_y_continuous(labels = dollar_format()) +\n  scale_color_manual(\n    values = c(\n      \"Low\" = ar_colors[[\"current\"]],\n      \"Medium\" = ar_colors[[\"early\"]],\n      \"High\" = ar_colors[[\"critical\"]]\n    )\n  ) +\n  scale_size_continuous(range = c(3, 10)) +\n  labs(\n    title = \"Customer Risk Matrix\",\n    x = \"Average Days Overdue\",\n    y = \"Total AR Outstanding\",\n    color = \"Risk Level\",\n    size = \"Credit\\nUtilization\"\n  )\n\n# Convert to interactive\nggplotly(risk_plot, tooltip = \"text\") |>\n  layout(hovermode = \"closest\")\n```\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Credit Utilization Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create credit utilization chart\nutilization_data <- customer_summary |>\n  mutate(\n    utilization_category = case_when(\n      credit_utilization >= 1 ~ \"Over Limit\",\n      credit_utilization >= 0.9 ~ \"90-100%\",\n      credit_utilization >= 0.75 ~ \"75-90%\",\n      credit_utilization >= 0.5 ~ \"50-75%\",\n      TRUE ~ \"Under 50%\"\n    ),\n    utilization_category = factor(\n      utilization_category,\n      levels = c(\"Under 50%\", \"50-75%\", \"75-90%\", \"90-100%\", \"Over Limit\")\n    )\n  )\n\nutilization_plot <- utilization_data |>\n  ggplot(aes(y = utilization_category)) +\n  geom_bar(fill = ar_colors[\"positive\"]) +\n  scale_x_continuous(breaks = seq(0, 20, 2)) +\n  labs(\n    title = \"Credit Utilization Distribution\",\n    y = \"Utilization Range\",\n    x = \"Number of Customers\"\n  ) \n\n# Convert to interactive\nggplotly(utilization_plot) |>\n  layout(hovermode = \"x\")\n```\n:::\n\n\n# Collection Trends\n\n## Row\n\n### Column {width=\"50%\"}\n\n#### Collection Performance Over Time\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate monthly collection metrics\nmonthly_collections <- ar_data |>\n  filter(!is.na(payment_date)) |>\n  mutate(\n    payment_month = floor_date(_____, \"month\"),\n    days_to_collect = as.numeric(_____ - _____)\n  ) |>\n  group_by(payment_month) |>\n  summarise(\n    collected_amount = sum(amount),\n    avg_collection_days = mean(days_to_collect, na.rm = TRUE),\n    invoices_collected = n(),\n    .groups = \"drop\"\n  )\n\n# Create collection trend plot\ncollection_plot <- monthly_collections |>\n  ggplot(aes(x = payment_month)) +\n  geom_col(aes(y = collected_amount), fill = ar_colors[\"positive\"], alpha = 0.7) +\n  geom_line(aes(y = avg_collection_days * 10000), color = ar_colors[\"negative\"], size = 2) +\n  geom_point(aes(y = avg_collection_days * 10000), color = ar_colors[\"negative\"], size = 3) +\n  scale_y_continuous(\n    labels = dollar_format(),\n    sec.axis = sec_axis(~ . / 10000, name = \"Avg Days to Collect\")\n  ) +\n  scale_x_date(date_labels = \"%b %Y\") +\n  labs(\n    title = \"Monthly Collections and Average Days to Collect\",\n    x = NULL,\n    y = \"Amount Collected\"\n  )\n\n# Convert to interactive\nggplotly(collection_plot) |>\n  layout(hovermode = \"x unified\")\n```\n:::\n\n\n### Column {width=\"50%\"}\n\n#### Payment Behavior Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Analyze payment patterns\npayment_patterns <- ar_data |>\n  filter(status == \"Paid\" & !is.na(payment_date)) |>\n  mutate(\n    days_to_pay = as.numeric(payment_date - invoice_date),\n    payment_timing = case_when(\n      days_to_pay <= terms_days ~ \"On Time\",\n      days_to_pay <= terms_days + 10 ~ \"Slightly Late\",\n      days_to_pay <= terms_days + 30 ~ \"Late\",\n      TRUE ~ \"Very Late\"\n    ),\n    payment_timing = factor(\n      payment_timing,\n      levels = c(\"On Time\", \"Slightly Late\", \"Late\", \"Very Late\")\n    )\n  )\n\n# Create payment timing distribution\ntiming_plot <- payment_patterns |>\n  count(payment_timing) |>\n  ggplot(aes(x = payment_timing, y = n, fill = payment_timing)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"On Time\" = ar_colors[[\"current\"]],\n      \"Slightly Late\" = ar_colors[[\"early\"]],\n      \"Late\" = ar_colors[[\"moderate\"]],\n      \"Very Late\" = ar_colors[[\"critical\"]]\n    )\n  ) +\n  labs(\n    title = \"Payment Timing Distribution\",\n    x = NULL,\n    y = \"Number of Invoices\",\n    fill = NULL\n  ) \n\n# Convert to interactive\nggplotly(timing_plot) |>\n  layout(hovermode = \"x\")\n```\n:::\n\n\n# Cash Flow Forecast\n\n## Row\n\n### Expected Collections Forecast\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create collection forecast based on aging and historical patterns\nforecast_data <- ar_aging |>\n  mutate(\n    # Assign collection probability based on aging\n    collection_probability = case_when(\n      aging_bucket == \"Current\" ~ 0.95,\n      aging_bucket == \"1-30 Days\" ~ 0.85,\n      aging_bucket == \"31-60 Days\" ~ 0.70,\n      aging_bucket == \"61-90 Days\" ~ 0.50,\n      TRUE ~ 0.25\n    ),\n    # Estimate collection timing\n    expected_collection_days = case_when(\n      aging_bucket == \"Current\" ~ 15,\n      aging_bucket == \"1-30 Days\" ~ 20,\n      aging_bucket == \"31-60 Days\" ~ 30,\n      aging_bucket == \"61-90 Days\" ~ 45,\n      TRUE ~ 90\n    ),\n    expected_collection_date = current_date + days(expected_collection_days),\n    expected_collection_week = floor_date(expected_collection_date, \"week\"),\n    expected_amount = amount * collection_probability\n  )\n\n# Aggregate by week\nweekly_forecast <- forecast_data |>\n  filter(expected_collection_week <= current_date + weeks(8)) |>\n  group_by(expected_collection_week) |>\n  summarise(\n    expected_collections = sum(expected_amount),\n    best_case = sum(amount),\n    worst_case = sum(expected_amount * 0.7),\n    .groups = \"drop\"\n  )\n\n# Create forecast visualization\nforecast_plot <- weekly_forecast |>\n  ggplot(aes(x = expected_collection_week)) +\n  geom_ribbon(\n    aes(ymin = worst_case, ymax = best_case),\n    fill = ar_colors[\"positive\"],\n    alpha = 0.2\n  ) +\n  geom_line(\n    aes(y = expected_collections),\n    color = ar_colors[\"positive\"],\n    size = 2\n  ) +\n  geom_point(\n    aes(y = expected_collections),\n    color = ar_colors[\"positive\"],\n    size = 3\n  ) +\n  scale_y_continuous(labels = dollar_format()) +\n  scale_x_date(date_labels = \"%b %d\") +\n  labs(\n    title = \"8-Week Collection Forecast\",\n    subtitle = \"Expected collections with confidence band\",\n    x = NULL,\n    y = \"Expected Collections\"\n  )\n\n# Convert to interactive\nggplotly(forecast_plot) |>\n  layout(hovermode = \"x unified\")\n```\n:::\n\n\n## Row\n\n### Collection Probability by Aging\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create collection probability analysis\nprobability_summary <- ar_aging |>\n  group_by(aging_bucket) |>\n  summarise(\n    outstanding_amount = sum(amount),\n    invoice_count = n(),\n    .groups = \"drop\"\n  ) |>\n  mutate(\n    collection_probability = case_when(\n      aging_bucket == \"Current\" ~ 95,\n      aging_bucket == \"1-30 Days\" ~ 85,\n      aging_bucket == \"31-60 Days\" ~ 70,\n      aging_bucket == \"61-90 Days\" ~ 50,\n      TRUE ~ 25\n    ),\n    expected_collection = outstanding_amount * (collection_probability / 100),\n    expected_loss = outstanding_amount - expected_collection\n  )\n\n# Display probability table\nprobability_summary |>\n  gt() |>\n  tab_header(\n    title = \"Collection Probability Analysis\",\n    subtitle = \"Expected collections based on historical patterns\"\n  ) |>\n  fmt_currency(\n    columns = c(outstanding_amount, expected_collection, expected_loss),\n    decimals = 0\n  ) |>\n  fmt_number(\n    columns = invoice_count,\n    decimals = 0\n  ) |>\n  fmt_percent(\n    columns = collection_probability,\n    scale_values = FALSE,\n    decimals = 0\n  ) |>\n  cols_label(\n    aging_bucket = \"Aging Bucket\",\n    outstanding_amount = \"Outstanding\",\n    invoice_count = \"Invoices\",\n    collection_probability = \"Collection %\",\n    expected_collection = \"Expected\",\n    expected_loss = \"Risk\"\n  ) |>\n  tab_style(\n    style = cell_fill(color = \"#FFEBEE\"),\n    locations = cells_body(\n      columns = expected_loss,\n      rows = expected_loss > 10000\n    )\n  ) |>\n  grand_summary_rows(\n    columns = c(outstanding_amount, expected_collection, expected_loss),\n    fns = list(Total = ~sum(.)),\n    fmt = ~fmt_currency(., decimals = 0)\n  )\n```\n:::\n\n\n# Insights & Actions\n\n## Key Findings\n\nBased on your dashboard analysis, identify the following insights:\n\n1. **Overall AR Health**:\n   - Current DSO of _____ days compared to target of 45 days\n   - _____% of AR is current (target: 70%+)\n   - Total past due amount: $_____\n\n2. **Customer Concentration Risk**:\n   - Top 5 customers represent _____% of total AR\n   - _____ customers are over their credit limit\n   - Highest risk customer: _____ with $_____ overdue\n\n3. **Collection Performance**:\n   - Average days to collect: _____ days\n   - Collection effectiveness trending up/down\n   - Expected collections next 4 weeks: $_____\n\n## Recommended Actions\n\nComplete these action items based on your analysis:\n\n1. **Immediate Actions** (This Week):\n   - Contact all accounts over _____ days\n   - Review credit limits for customers at >90% utilization\n   - Focus collection efforts on: _____\n\n2. **Short-term Improvements** (This Month):\n   - Implement automated reminders for accounts approaching _____ days\n   - Review payment terms for industries with poor payment history\n   - Target DSO reduction to _____ days\n\n3. **Strategic Initiatives** (This Quarter):\n   - Develop early payment discount program for _____\n   - Revise credit policy for _____ risk customers\n   - Implement _____ to improve collection effectiveness\n",
    "supporting": [],
>>>>>>> a872259 (changed eval to false and added format: dashboard for 10-12)
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}