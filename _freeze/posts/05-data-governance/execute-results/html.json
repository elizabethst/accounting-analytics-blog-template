{
  "hash": "6d8687175b3c9cbb66d809460b5bc307",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"5: Data Governance and Management\"\ndate: today\nexecute: \n  eval: false #set to true\n  message: false\n  warning: false\n---\n\n## Executive Summary\n\n*Write a 2-3 sentence summary of your data governance implementations and key insights here after completing the assignment.*\n\n---\n\n## Introduction\n\nAs an accounting professional, you need to ensure data integrity, quality, and compliance. Effective data governance helps organizations:\n\n- Maintain accurate and consistent financial records\n- Ensure referential integrity between related data\n- Document data structures for audit and compliance\n- Implement controls to prevent errors and fraud\n\nIn this blog post, you will:\n\n- Create validation functions for accounting data standards\n- Build referential integrity checks between tables\n- Design a comprehensive data dictionary\n\n## Setup and Load Libraries\n\n### Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(tidyverse)  # For data manipulation\nlibrary(gt)         # For formatted tables\nlibrary(lubridate)  # For date handling\n```\n:::\n\n\n### Setting Up Sample Data\n\nLet's create sample data representing accounting records:\n\n**Chart of Accounts Master Data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create chart of accounts\nchart_of_accounts <- tribble(\n  ~account_id, ~account_code, ~account_name,        ~account_type, ~active,\n  1,           \"1010\",        \"Cash\",               \"Asset\",       TRUE,\n  2,           \"1200\",        \"Accounts Receivable\",\"Asset\",       TRUE,\n  3,           \"2010\",        \"Accounts Payable\",   \"Liability\",   TRUE,\n  4,           \"3010\",        \"Common Stock\",       \"Equity\",      TRUE,\n  5,           \"4010\",        \"Sales Revenue\",      \"Revenue\",     TRUE,\n  6,           \"5010\",        \"Rent Expense\",       \"Expense\",     TRUE,\n  7,           \"5020\",        \"Salary Expense\",     \"Expense\",     FALSE\n)\n\n# View the data\nchart_of_accounts\n```\n:::\n\n\n**Sample Transactions**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create sample transactions (some with errors)\ntransactions <- tribble(\n  ~trans_id, ~trans_date,    ~account_id, ~debit,  ~credit, ~description,\n  \"T001\",    \"2025-03-15\",   1,           5000,    0,       \"Customer payment\",\n  \"T002\",    \"2025-03-15\",   5,           0,       5000,    \"Sales revenue\",\n  \"T003\",    \"03/20/2025\",   6,           1200,    0,       \"Rent payment\",\n  \"T004\",    \"2025-03-32\",   3,           0,       1200,    \"Rent payable\",\n  \"T005\",    \"2025-03-25\",   99,          500,     0,       \"Office supplies\",\n  \"T006\",    \"2025-03-25\",   2,           0,       500,     \"Customer invoice\"\n)\n\n# View the data\ntransactions\n```\n:::\n\n\n## Exercise 1: Data Standards Implementation\n\n### Create Account Code Validation Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to validate account codes\nvalidate_account_code <- function(account_code) {\n  # Check if account code is exactly 4 digits\n  is_valid <- str_detect(account_code, \"^\\\\d{_____}$\")\n  \n  return(is_valid)\n}\n\n# Test the function\ntest_codes <- c(\"1010\", \"ABC1\", \"10100\", \"999\")\n\n# Create results table\nvalidation_results <- tibble(\n  account_code = test_codes,\n  is_valid = map_lgl(_____, validate_account_code)\n)\n\n# Display results\nvalidation_results\n```\n:::\n\n\n### Create Date Validation Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to validate transaction dates\nvalidate_date <- function(date_string) {\n  # Try to parse the date\n  parsed_date <- suppressWarnings(as_date(date_string))\n  \n  # Check if parsing was successful\n  if (is.na(parsed_date)) {\n    return(list(valid = FALSE, reason = \"Invalid date format\"))\n  }\n  \n  # Check if date is not in the future\n  if (parsed_date > _____) {  # Compare to today's date\n    return(list(valid = _____, reason = \"Date cannot be in the future\"))\n  }\n  \n  # Check if date is reasonable (not before 2020)\n  if (parsed_date < as_date(\"_____\")) {\n    return(list(valid = FALSE, reason = \"Date too far in the past\"))\n  }\n  \n  return(list(valid = TRUE, reason = \"Valid date\"))\n}\n# Test dates\ntest_dates <- c(\"2025-03-15\", \"03/20/2025\", \"2025-03-32\", \"2028-01-01\", \"2019-01-01\")\n\n# Validate each date\ndate_validation <- tibble(\n  date_string = test_dates,\n  validation = map(_____, validate_date)\n) |>\n  mutate(\n    is_valid = map_lgl(validation, ~ .$valid),\n    reason = map_chr(validation, ~ ._____) \n  ) |>\n  select(-validation)\n\n# Display results\ndate_validation\n```\n:::\n\n\n## Exercise 2: Referential Integrity Check\n\n### Create Referential Integrity Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to check if all account IDs exist in chart of accounts\ncheck_referential_integrity <- function(transactions_df, chart_of_accounts_df) {\n  # Get valid account IDs from chart of accounts\n  valid_account_ids <- chart_of_accounts_df$_____\n  \n  # Find transactions with invalid account IDs\n  invalid_transactions <- transactions_df |>\n    filter(!_____ %in% valid_account_ids)\n  \n  # Check if debits equal credits by date\n  daily_balance <- transactions_df |>\n    group_by(_____) |>\n    summarize(\n      total_debits = sum(debit),\n      total_credits = sum(_____),\n      difference = round(total_debits - _____ , 2)\n    ) |>\n    filer(difference != 0)\n  \n  # Return results\n  return(list(\n    has_invalid_accounts = nrow(invalid_transactions) > 0,\n    invalid_transactions = invalid_transactions,\n    has_unbalanced_days = nrow(daily_balance) > 0,\n    unbalanced_days = daily_balance\n  ))\n}\n\n# Check referential integrity\nintegrity_check <- check_referential_integrity(_____, _____)\n\n# Display invalid account references\nif (integrity_check$has_invalid_accounts) {\n  cat(\"Invalid Account References Found:\\n\")\n  print(integrity_check$invalid_transactions)\n}\n\n# Display unbalanced days\nif (integrity_check$_____) {\n  cat(\"\\nUnbalanced Transaction Days:\\n\")\n  print(integrity_check$_____)\n}\n```\n:::\n\n\n## Exercise 3: Data Dictionary Creation\n\n### Design AR System Data Dictionary\n\nCreate a comprehensive data dictionary for an accounts receivable system with the following structure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create AR data dictionary\nar_data_dictionary <- tribble(\n  ~field_name,        ~data_type,     ~max_length, ~required, ~description,                          ~valid_values,                    ~business_rules,\n  \"customer_id\",      \"VARCHAR\",      10,          \"Yes\",     \"Unique customer identifier\",          \"C0001-C9999\",                   \"System generated, sequential\",\n  \"customer_name\",    \"VARCHAR\",      100,         \"Yes\",     \"_____\",                              \"Any valid business name\",        \"Must match legal entity name\",\n  \"invoice_number\",   \"_____\",        20,          \"Yes\",     \"Unique invoice identifier\",           \"INV-YYYY-NNNNN\",                \"Year + sequential number\",\n  \"invoice_date\",     \"DATE\",         NA,          \"Yes\",     \"Date invoice was issued\",             \"Valid date\",                    \"_____\",\n  \"due_date\",         \"DATE\",         NA,          \"Yes\",     \"_____\",                              \"Valid date\",                    \"Must be >= invoice_date\",\n  \"invoice_amount\",   \"DECIMAL(10,2)\", NA,         \"Yes\",     \"Total invoice amount\",                \"> 0\",                          \"Must be positive\",\n  \"payment_status\",   \"VARCHAR\",      20,          \"_____\",   \"Current payment status\",              \"Open, Partial, Paid, Overdue\",  \"Updated based on payments\",\n  \"days_outstanding\", \"INTEGER\",      NA,          \"No\",      \"_____\",                              \">= 0\",                          \"Calculated: Today - Invoice Date\"\n)\n\n# Display the data dictionary\nar_data_dictionary |>\n  gt() |>\n  tab_header(\n    title = \"Accounts Receivable System Data Dictionary\",\n    subtitle = \"Field Specifications and Business Rules\"\n  ) |>\n  tab_style(\n    style = cell_fill(color = \"lightblue\"),\n    locations = cells_body(\n      columns = required,\n      rows = required == \"Yes\"\n    )\n  )\n```\n:::\n\n\n\n## Summary and Best Practices\n\n### Key Validation Rules Implemented\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize validation rules\nvalidation_summary <- tribble(\n  ~validation_type,        ~rule_description,                               ~purpose,\n  \"Account Code Format\",   \"_____\",                                         \"Ensures consistent account identification\",\n  \"Date Validation\",       \"Valid format, not future, reasonable range\",    \"_____\",\n  \"Referential Integrity\", \"_____\",                                         \"Prevents orphaned transactions\",\n  \"Balance Check\",         \"Daily debits must equal credits\",               \"_____\",\n  \"Required Fields\",       \"Check for NULL in required fields\",             \"Data completeness\"\n)\n\n# Display summary\nvalidation_summary |>\n  gt() |>\n  tab_header(title = \"Data Governance Validation Rules\")\n```\n:::\n\n\n## Key Findings\n\nBased on your data governance implementation, complete these insights:\n\n- **Data Quality Issues Found**: The sample transactions had _____ invalid account reference.\n- **Date Validation**: There were _____ valid dates and _____ non-valid dates (out of 5).\n- **Referential Integrity**: _____ transactions referenced non-existent accounts and _____ transactions had unbalanced transaction days. \n- **Data Dictionary Completeness**: The AR system requires _____ mandatory fields out of _____ total fields.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}