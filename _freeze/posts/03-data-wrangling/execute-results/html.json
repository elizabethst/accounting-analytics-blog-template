{
<<<<<<< HEAD
  "hash": "03dd9d95fe35795c042542029f44492d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3: Data Wrangling\"\ndate: today\nexecute: \n  eval: false #set to true\n  message: false\n  warning: false\n---\n\n\n## Executive Summary\n\n*Write a 2-3 sentence summary of your analysis and key findings here after completing the assignment.*\n\n---\n\n## Introduction\n\nAs an accounting professional, you'll often receive data that needs cleaning before analysis. Common issues include:\n\n- Inconsistent date formats (01/15/2027 vs 2027-01-15)\n- Mixed number formats ($1,234.56 vs 1234.56)\n- Inconsistent text (ACME CORP vs Acme Corp vs acme corp)\n- Data stored in multiple systems that need to be combined\n\nIn this blog post, you will:\n\n- Identify data quality issues\n- Clean messy accounting data\n- Combine data from multiple sources\n- Create professional summaries\n\n\n## Setup and Load Libraries\n\n### Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(tidyverse)  # For data manipulation\nlibrary(scales)     # For formatting numbers\n```\n:::\n\n\n### Creating Sample Data\n\nLet's create sample data that shows common accounting data problems:\n\n**Sales Transaction Data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sales data with typical formatting issues\nsales_raw <- tribble(\n  ~transaction_id, ~customer_id, ~sale_date,     ~amount,       ~product_category,\n  \"TXN-001\",      \"CUST001\",    \"01/15/2027\",   \"$25,000.00\",  \"Software\",\n  \"TXN-002\",      \"CUST002\",    \"01/20/2027\",   \"15000\",       \"Hardware\", \n  \"TXN-003\",      \"CUST003\",    \"2027-02-01\",   \"$8,750.50\",   \"Services\",\n  \"TXN-004\",      \"CUST001\",    \"02/15/2027\",   \"12000.00\",    \"software\",\n  \"TXN-005\",      \"CUST999\",    \"02/28/2027\",   \"$5,500\",      \"Hardware\", # Bad customer\n  \"TXN-006\",      \"CUST004\",    \"3/10/2027\",    \"18500\",       \"Services\",\n  \"TXN-007\",      \"CUST002\",    \"03/15/2027\",   \"$22,000\",     \"Software\",\n  \"TXN-008\",      \"CUST003\",    \"2027-03-20\",   \"9750.00\",     \"HARDWARE\"\n)\n\n# View the raw data\nsales_raw\n```\n:::\n\n\n**Customer Master Data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Customer data with inconsistent formatting\ncustomers_raw <- tribble(\n  ~customer_id, ~customer_name,      ~region, ~segment,\n  \"CUST001\",   \"acme corporation\",   \"North\", \"Enterprise\",\n  \"CUST002\",   \"GLOBEX INC\",        \"South\", \"Mid-Market\",\n  \"CUST003\",   \"umbrella corp\",      \"West\",  \"\",           # Missing segment\n  \"CUST004\",   \"Stark Industries\",   \"East\",  \"Enterprise\",\n  \"CUST005\",   \"wayne enterprises\",  \"North\", \"Enterprise\"  # No sales in Q1\n)\n\n# View the raw customer data\ncustomers_raw\n```\n:::\n\n\n\n### Identifying Data Quality Issues\nBefore cleaning, let's identify the problems:\n\n**Check Date Formats**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the different date formats\nsales_raw |> \n  select(sale_date) |>\n  distinct()\n```\n:::\n\n\n**Check Amount Formats**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the different amount formats\nsales_raw |>\n  select(amount) |>\n  distinct()\n```\n:::\n\n\n**Check Customer Name Consistency**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at customer name formatting\ncustomers_raw |>\n  select(customer_name)\n```\n:::\n\n\n\n**Find Missing Data**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for blank segments\ncustomers_raw |>\n  filter(segment == \"\")\n```\n:::\n\n\n### Cleaning the Data\n\n#### Step 1: Clean Sales Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean the sales data\nsales_clean <- sales_raw |>\n  mutate(\n    # Fix dates: parse_date_time can handle multiple formats\n    sale_date = parse_date_time(_____, orders = c(\"mdy\", \"ymd\")) |> \n                as_date(),\n    \n    # Fix amounts: remove $ and , then convert to number\n    amount = str_remove_all(amount, \"[___]\") |>  # Remove $ and ,\n             as.numeric(),\n    \n    # Standardize text to Title Case\n    product_category = str_to_title(_____),\n    \n    # Add useful columns for reporting\n    month_name = month(sale_date, label = TRUE, abbr = FALSE)\n  )\n# View cleaned sales data\nsales_clean\n```\n:::\n\n\n\n#### Step 2: Clean Customer Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean the customer data\ncustomers_clean <- customers_raw |>\n  mutate(\n    # Standardize customer names to Title Case\n    customer_name = str_to_title(_____),\n    \n    # Replace blank segments with \"Unclassified\"\n    segment = if_else(segment == \"\", \"_____\", segment)\n  )\n\n# View cleaned customer data\ncustomers_clean\n```\n:::\n\n\n\n### Combining the Data\n\n#### Join Sales with Customer Information\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine sales and customer data\n# Use left_join to keep all sales, even if customer not found\nsales_complete <- sales_clean |>\n  left_join(_____, by = \"_____\")\n\n# View the combined data\nglimpse(sales_complete)\n```\n:::\n\n\n\n#### Check for Data Quality Issues\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find sales without valid customer info\nproblem_sales <- sales_complete |>\n  filter(is.na(_____)) |>  # Check for missing customer_name\n  select(transaction_id, customer_id, amount, sale_date)\n\nproblem_sales\n```\n:::\n\n\n\n### Analysis and Insights\n\n#### Monthly Sales Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate monthly sales (excluding problem transactions)\nmonthly_sales <- sales_complete |>\n  filter(!is.na(customer_name)) |>  # Only valid customers\n  group_by(_____) |>  # Group by month_name\n  summarise(\n    total_sales = sum(_____),\n    transaction_count = n(),\n    average_sale = mean(_____)\n  )\n\n# View monthly summary\nmonthly_sales\n\n# Format as currency\nmonthly_sales |>\n  mutate(\n    total_sales = dollar(total_sales),\n    average_sale = dollar(average_sale)\n  )\n```\n:::\n\n\n#### Sales by Product Category\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Analyze sales by product\nproduct_summary <- sales_complete |>\n  filter(!is.na(customer_name)) |>\n  group_by(_____) |>  # Group by product_category\n  summarise(\n    total_sales = sum(amount),\n    count = n()\n  ) |>\n  mutate(\n    percentage = (total_sales / sum(total_sales)) * 100\n  ) |>\n  arrange(desc(total_sales))\n\n# View product summary\nproduct_summary\n```\n:::\n\n\n#### Customer Segment Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Analyze by customer segment\nsegment_summary <- sales_complete |>\n  filter(!is.na(customer_name)) |>\n  group_by(_____) |>  # Group by segment\n  summarise(\n    total_sales = sum(amount),\n    customer_count = n_distinct(_____),  # Count unique customers\n    avg_per_customer = total_sales / customer_count\n  )\n\n# View segment summary with formatting\nsegment_summary |>\n  mutate(\n    total_sales = dollar(total_sales),\n    avg_per_customer = dollar(avg_per_customer)\n  )\n```\n:::\n\n\n## Key Findings\nData Quality Report\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate data quality metrics\ntotal_transactions <- nrow(sales_complete)\nvalid_transactions <- sum(!is.na(sales_complete$customer_name))\nproblem_transactions <- sum(is.na(sales_complete$customer_name))\n\n# Create summary\ndata_quality <- tibble(\n  Metric = c(\"Total Transactions\", \n            \"Valid Transactions\", \n            \"Problem Transactions\",\n            \"Data Quality Rate\"),\n  Value = c(total_transactions,\n            valid_transactions,\n            problem_transactions,\n            percent(valid_transactions/total_transactions) )\n)\n\ndata_quality\n```\n:::\n\n\n\n#### Business Insights\n\nBased on the analysis above, complete these insights:\n\n- **Monthly Trend**: Sales (increased/decreased) from January to March, with the highest sales in _____.\n- **Product Performance**: _____ generated the most revenue, accounting for _____% of total sales.\n- **Customer Segments**: The _____ segment had the highest average sale per customer at $_____.\n- **Data Quality**: We identified _____ transaction(s) with invalid customer IDs that need investigation.",
=======
  "hash": "acff0cd04323889db6d6843f18f26f5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3: Data Wrangling\"\ndate: today\nexecute: \n  eval: false  #set to true\n  message: false\n  warning: false\n---\n\n\n## Executive Summary\n\n*Write a 2-3 sentence summary of your analysis and key findings here after completing the assignment.*\n\n---\n\n## Introduction\n\nAs an accounting professional, you'll often receive data that needs cleaning before analysis. Common issues include:\n\n- Inconsistent date formats (01/15/2027 vs 2027-01-15)\n- Mixed number formats ($1,234.56 vs 1234.56)\n- Inconsistent text (ACME CORP vs Acme Corp vs acme corp)\n- Data stored in multiple systems that need to be combined\n\nIn this blog post, you will:\n\n- Identify data quality issues\n- Clean messy accounting data\n- Combine data from multiple sources\n- Create professional summaries\n\n\n## Setup and Load Libraries\n\n### Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(tidyverse)  # For data manipulation\nlibrary(scales)     # For formatting numbers\n```\n:::\n\n\n### Creating Sample Data\n\nLet's create sample data that shows common accounting data problems:\n\n**Sales Transaction Data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sales data with typical formatting issues\nsales_raw <- tribble(\n  ~transaction_id, ~customer_id, ~sale_date,     ~amount,       ~product_category,\n  \"TXN-001\",      \"CUST001\",    \"01/15/2027\",   \"$25,000.00\",  \"Software\",\n  \"TXN-002\",      \"CUST002\",    \"01/20/2027\",   \"15000\",       \"Hardware\", \n  \"TXN-003\",      \"CUST003\",    \"2027-02-01\",   \"$8,750.50\",   \"Services\",\n  \"TXN-004\",      \"CUST001\",    \"02/15/2027\",   \"12000.00\",    \"software\",\n  \"TXN-005\",      \"CUST999\",    \"02/28/2027\",   \"$5,500\",      \"Hardware\", # Bad customer\n  \"TXN-006\",      \"CUST004\",    \"3/10/2027\",    \"18500\",       \"Services\",\n  \"TXN-007\",      \"CUST002\",    \"03/15/2027\",   \"$22,000\",     \"Software\",\n  \"TXN-008\",      \"CUST003\",    \"2027-03-20\",   \"9750.00\",     \"HARDWARE\"\n)\n\n# View the raw data\nsales_raw\n```\n:::\n\n\n**Customer Master Data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Customer data with inconsistent formatting\ncustomers_raw <- tribble(\n  ~customer_id, ~customer_name,      ~region, ~segment,\n  \"CUST001\",   \"acme corporation\",   \"North\", \"Enterprise\",\n  \"CUST002\",   \"GLOBEX INC\",        \"South\", \"Mid-Market\",\n  \"CUST003\",   \"umbrella corp\",      \"West\",  \"\",           # Missing segment\n  \"CUST004\",   \"Stark Industries\",   \"East\",  \"Enterprise\",\n  \"CUST005\",   \"wayne enterprises\",  \"North\", \"Enterprise\"  # No sales in Q1\n)\n\n# View the raw customer data\ncustomers_raw\n```\n:::\n\n\n\n### Identifying Data Quality Issues\nBefore cleaning, let's identify the problems:\n\n**Check Date Formats**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the different date formats\nsales_raw |> \n  select(sale_date) |>\n  distinct()\n```\n:::\n\n\n**Check Amount Formats**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the different amount formats\nsales_raw |>\n  select(amount) |>\n  distinct()\n```\n:::\n\n\n**Check Customer Name Consistency**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at customer name formatting\ncustomers_raw |>\n  select(customer_name)\n```\n:::\n\n\n\n**Find Missing Data**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for blank segments\ncustomers_raw |>\n  filter(segment == \"\")\n```\n:::\n\n\n### Cleaning the Data\n\n#### Step 1: Clean Sales Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean the sales data\nsales_clean <- sales_raw |>\n  mutate(\n    # Fix dates: parse_date_time can handle multiple formats\n    sale_date = parse_date_time(sale_date, orders = c(\"mdy\", \"ymd\")) |> \n                as_date(),\n\n    # Fix amounts: remove $ and , then convert to number\n    amount = str_remove_all(amount, \"[$,]\") |>  # Remove $ and ,\n      as.numeric(),\n\n    # Standardize text to Title Case\n    product_category = str_to_title(product_category),\n    \n    # Add useful columns for reporting\n    month_name = month(sale_date, label = TRUE, abbr = FALSE)\n  )\n# View cleaned sales data\nsales_clean\n```\n:::\n\n\n\n#### Step 2: Clean Customer Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean the customer data\ncustomers_clean <- customers_raw |>\n  mutate(\n    # Standardize customer names to Title Case\n    customer_name = str_to_title(_____),\n    \n    # Replace blank segments with \"Unclassified\"\n    segment = if_else(segment == \"\", \"_____\", segment)\n  )\n\n# View cleaned customer data\ncustomers_clean\n```\n:::\n\n\n\n### Combining the Data\n\n#### Join Sales with Customer Information\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine sales and customer data\n# Use left_join to keep all sales, even if customer not found\nsales_complete <- sales_clean |>\n  left_join(_____, by = \"_____\")\n\n# View the combined data\nglimpse(sales_complete)\n```\n:::\n\n\n\n#### Check for Data Quality Issues\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find sales without valid customer info\nproblem_sales <- sales_complete |>\n  filter(is.na(_____)) |>  # Check for missing customer_name\n  select(transaction_id, customer_id, amount, sale_date)\n\nproblem_sales\n```\n:::\n\n\n\n### Analysis and Insights\n\n#### Monthly Sales Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate monthly sales (excluding problem transactions)\nmonthly_sales <- sales_complete |>\n  filter(!is.na(customer_name)) |>  # Only valid customers\n  group_by(_____) |>  # Group by month_name\n  summarise(\n    total_sales = sum(_____),\n    transaction_count = n(),\n    average_sale = mean(_____)\n  )\n\n# View monthly summary\nmonthly_sales\n\n# Format as currency\nmonthly_sales |>\n  mutate(\n    total_sales = dollar(total_sales),\n    average_sale = dollar(average_sale)\n  )\n```\n:::\n\n\n#### Sales by Product Category\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Analyze sales by product\nproduct_summary <- sales_complete |>\n  filter(!is.na(customer_name)) |>\n  group_by(_____) |>  # Group by product_category\n  summarise(\n    total_sales = sum(amount),\n    count = n()\n  ) |>\n  mutate(\n    percentage = (total_sales / sum(total_sales)) * 100\n  ) |>\n  arrange(desc(total_sales))\n\n# View product summary\nproduct_summary\n```\n:::\n\n\n#### Customer Segment Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Analyze by customer segment\nsegment_summary <- sales_complete |>\n  filter(!is.na(customer_name)) |>\n  group_by(_____) |>  # Group by segment\n  summarise(\n    total_sales = sum(amount),\n    customer_count = n_distinct(_____),  # Count unique customers\n    avg_per_customer = total_sales / customer_count\n  )\n\n# View segment summary with formatting\nsegment_summary |>\n  mutate(\n    total_sales = dollar(total_sales),\n    avg_per_customer = dollar(avg_per_customer)\n  )\n```\n:::\n\n\n## Key Findings\nData Quality Report\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate data quality metrics\ntotal_transactions <- nrow(sales_complete)\nvalid_transactions <- sum(!is.na(sales_complete$customer_name))\nproblem_transactions <- sum(is.na(sales_complete$customer_name))\n\n# Create summary\ndata_quality <- tibble(\n  Metric = c(\"Total Transactions\", \n            \"Valid Transactions\", \n            \"Problem Transactions\",\n            \"Data Quality Rate\"),\n  Value = c(total_transactions,\n            valid_transactions,\n            problem_transactions,\n            percent(valid_transactions/total_transactions) )\n)\n\ndata_quality\n```\n:::\n\n\n\n#### Business Insights\n\nBased on the analysis above, complete these insights:\n\n- **Monthly Trend**: Sales (increased/decreased) from January to March, with the highest sales in _____.\n- **Product Performance**: _____ generated the most revenue, accounting for _____% of total sales.\n- **Customer Segments**: The _____ segment had the highest average sale per customer at $_____.\n- **Data Quality**: We identified _____ transaction(s) with invalid customer IDs that need investigation.",
>>>>>>> a872259 (changed eval to false and added format: dashboard for 10-12)
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}