---
title: "Accounts Receivable Dashboard"
date: today
format: 
  dashboard:
    theme: cosmo
    scrolling: true
---

```{r}
#| label: setup
#| include: false

# Load required packages
library(tidyverse)  # For data manipulation and visualization
library(scales)     # For formatting numbers and percentages
library(DT)         # For interactive tables
library(plotly)     # For interactive plots
library(gt)         # For creating beautiful tables

# Set theme for consistent plot appearance
theme_set(theme_minimal())
```

```{r}
#| label: create-sample-data
#| include: false

# Create sample AR data for the dashboard
# In a real scenario, this would be imported from your accounting system

# Set seed for reproducibility
set.seed(123)

# Create sample customer data
customers <- tribble(
  ~customer_id, ~customer_name, ~credit_limit, ~industry, ~risk_category,
  "C001", "ABC Manufacturing", 50000, "Manufacturing", "Low",
  "C002", "XYZ Retail", 30000, "Retail", "Medium",
  "C003", "Tech Solutions", 75000, "Technology", "Low",
  "C004", "Global Traders", 40000, "Wholesale", "High",
  "C005", "Service Pro", 25000, "Services", "Medium",
  "C006", "Industrial Supply", 60000, "Manufacturing", "Low",
  "C007", "Digital Services", 35000, "Technology", "Medium",
  "C008", "Regional Distributors", 45000, "Wholesale", "High",
  "C009", "Smart Systems", 55000, "Technology", "Low",
  "C010", "Local Retailers", 20000, "Retail", "High"
)

# Create sample invoice data
invoices <- tribble(
  ~invoice_id, ~customer_id, ~invoice_date, ~due_date, ~amount, ~status,
  "INV-001", "C001", "2026-10-15", "2026-11-14", 12500, "Paid",
  "INV-002", "C002", "2026-11-01", "2026-12-01", 8200, "Open",
  "INV-003", "C003", "2026-10-20", "2026-11-19", 15600, "Paid",
  "INV-004", "C004", "2026-09-15", "2026-10-15", 9800, "Open",
  "INV-005", "C005", "2026-11-05", "2026-12-05", 5400, "Open",
  "INV-006", "C001", "2026-11-10", "2026-12-10", 18900, "Open",
  "INV-007", "C006", "2026-10-25", "2026-11-24", 22000, "Paid",
  "INV-008", "C007", "2026-08-20", "2026-09-19", 7500, "Open",
  "INV-009", "C008", "2026-11-12", "2026-12-12", 13200, "Open",
  "INV-010", "C003", "2026-11-08", "2026-12-08", 24500, "Open",
  "INV-011", "C009", "2026-10-30", "2026-11-29", 16800, "Open",
  "INV-012", "C010", "2026-07-15", "2026-08-14", 3200, "Open",
  "INV-013", "C002", "2026-11-15", "2026-12-15", 11400, "Open",
  "INV-014", "C004", "2026-10-10", "2026-11-09", 8900, "Paid",
  "INV-015", "C005", "2026-09-25", "2026-10-25", 6700, "Open"
) |>
  # Convert dates to proper date format
  mutate(
    invoice_date = ymd(invoice_date),  # Convert to date
    due_date = ymd(due_date)           # Convert to date
  )

# Calculate current date for aging
current_date <- as_date("2026-11-20")

# Create AR aging data
ar_data <- invoices |>
  # Filter for open invoices only
  filter(status == "Open") |>
  # Join with customer information
  left_join(customers, by = "customer_id") |>
  # Calculate days overdue
  mutate(
    days_outstanding = as.numeric(current_date - invoice_date),  # Days since invoice
    days_overdue = as.numeric(current_date - due_date),         # Days past due
    days_overdue = if_else(days_overdue < 0, 0, days_overdue),  # Can't be negative
    # Create aging buckets
    aging_bucket = case_when(
      days_overdue == 0 ~ "Current",
      days_overdue <= 30 ~ "1-30 Days",
      days_overdue <= 60 ~ "31-60 Days",
      days_overdue <= 90 ~ "61-90 Days",
      TRUE ~ "Over 90 Days"
    ),
    # Order aging buckets properly
    aging_bucket = factor(aging_bucket, 
                        levels = c("Current", "1-30 Days", "31-60 Days", 
                                  "61-90 Days", "Over 90 Days"))
  )

# Create historical DSO data (for trend analysis)
historical_dso <- tribble(
  ~month, ~dso, ~ar_balance,
  "2026-01", 42, 145000,
  "2026-02", 45, 152000,
  "2026-03", 43, 148000,
  "2026-04", 47, 165000,
  "2026-05", 44, 155000,
  "2026-06", 46, 162000,
  "2026-07", 48, 170000,
  "2026-08", 50, 175000,
  "2026-09", 49, 172000,
  "2026-10", 47, 168000,
  "2026-11", 45, 159000
) |>
  mutate(month = ym(month))  # Convert to date
```



# Executive Summary {.tabset}

## Key Metrics

```{r}
#| label: calculate-kpis

# Calculate key performance indicators (KPIs)
total_ar <- ar_data |>
  summarise(total = sum(amount)) |>
  pull(total)

# Calculate Days Sales Outstanding (DSO)
# Assume average daily sales of $5,000 for this example
average_daily_sales <- 5000
current_dso <- round(total_ar / average_daily_sales, 1)

# Calculate past due percentage
past_due_amount <- ar_data |>
  filter(days_overdue > 0) |>
  summarise(total = sum(amount)) |>
  pull(total)

past_due_percentage <- past_due_amount / total_ar

# Calculate Collection Effectiveness Index (CEI)
# Simplified calculation for demonstration
cei <- round(85 + rnorm(1, 0, 5), 1)  # Simulated CEI

# Calculate bad debt percentage (simulated)
bad_debt_percentage <- 2.5
```

## Row {height="10%"}
### Total AR Balance
```{r}
#| content: valuebox
#| title: "Outstanding Receivables"
#| icon: credit-card 
#| color: primary

list(
  value = dollar(total_ar)
)
```

### Days Sales Outstanding
```{r}
#| content: valuebox
#| title: "DSO"
#| icon: calendar
#| color: !expr if_else(current_dso > 45, "warning", "success")

list(
  value = paste(current_dso, "days")
)
```

### Past Due %
```{r}
#| content: valuebox
#| title: "Overdue Invoices"
#| icon: exclamation-triangle
#| color: !expr if_else(past_due_percentage > 20, "danger", "secondary")

list(
  value = percent(past_due_percentage)
)
```

### Collection Effectiveness
```{r}
#| content: valuebox
#| title: "CEI"
#| icon: percent
#| color: !expr if_else(cei > 80, "success", "warning")

# Collection Effectiveness Index (CEI) is calculated using this formula:
# CEI = (Beginning AR + Credit Sales - Ending AR) / (Beginning AR + Credit Sales - Current AR) Ã— 100
# 90-100%: Excellent collection performance
# 80-89%: Good collection performance
# 70-79%: Average collection performance
# Below 70%: Poor collection performance - needs attention

list(
  value = percent(cei, scale = 1)
)
```

## Summary Table

```{r}
#| label: summary-table

# Create summary statistics table - FIX: Keep all values as numeric first
summary_stats <- ar_data |>
  summarise(
    `Total AR` = sum(amount),
    `Number of Invoices` = n(),
    `Average Invoice` = mean(amount),
    `Largest Invoice` = max(amount),
    `Smallest Invoice` = min(amount),
    `Past Due Amount` = sum(amount[days_overdue > 0]),
    `Current Amount` = sum(amount[days_overdue == 0])
  ) |>
  pivot_longer(everything(), names_to = "Metric", values_to = "Value") 

# Display as a nice table using gt
summary_stats |>
  gt() |>
  tab_header(
    title = "AR Summary Statistics",
    subtitle = "Key metrics for outstanding receivables"
  ) |>
    fmt_currency(
      columns = Value,
      rows = !Metric %in% "Number of Invoices",
      decimals = 0
    ) |> 
  cols_align(
    align = "left",
    columns = Metric
  ) |>
  cols_align(
    align = "right", 
    columns = Value
  ) |>
  tab_options(
    table.width = pct(100)
  ) 
```

# Aging Analysis

## Row {height=30%}

```{r}
#| label: aging-summary-cards

# Calculate aging bucket totals
aging_summary <- ar_data |>
  group_by(aging_bucket) |>
  summarise(
    total = sum(amount),
    count = n()
  ) 
  
# Display as a styled table using gt
aging_summary |>
  gt() |>
  tab_header(
    title = "Aging Summary by Bucket"
  ) |>
    cols_label(
  aging_bucket = "Aging Bucket",
total = "Amount",
count = "Invoices"
    ) |>
      fmt_currency(
        columns = total,
        decimals = 0
      ) |> 
  cols_align(
    align = "center",
    columns = c(total, count)
  ) |>
  tab_style(
    style = cell_fill(color = "#e9ecef"),
    locations = cells_body(
      columns = everything(),
      rows = aging_bucket == "Over 90 Days"
    )
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "#28a745", alpha = 0.2),
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = everything(),
      rows = aging_bucket == "Current"
    )
  ) |>
  tab_options(
    table.width = pct(100)
  )
```

## Row {height=70%}

### Aging Distribution

```{r}
#| label: aging-chart

# Create aging distribution chart
aging_plot <- ar_data |>
  group_by(aging_bucket) |>
  summarise(total = sum(amount)) |>
  ggplot(aes(x = aging_bucket, y = total, fill = aging_bucket)) +
  geom_col() +
  scale_y_continuous(labels = dollar_format()) +
  scale_fill_manual(values = c("Current" = "seagreen",
                              "1-30 Days" = "blue", 
                              "31-60 Days" = "yellow",
                              "61-90 Days" = "darkorange",
                              "Over 90 Days" = "red")) +
  labs(title = "AR Aging Distribution",
      x = NULL,
      y = NULL,
      fill = NULL) +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to interactive plot
ggplotly(aging_plot, tooltip = c("x", "y")) |> 
layout(
    # Show data for all series when hovering over a date
    hovermode = "x unified"
  ) 
```

### Aging by Customer Type

```{r}
#| label: aging-by-industry

# Create aging by industry chart
industry_aging <- ar_data |>
  group_by(industry, aging_bucket) |>
  summarise(total = sum(amount), .groups = "drop") |>
  ggplot(aes(x = industry, y = total, fill = aging_bucket)) +
  geom_col(position = "stack") +
  scale_y_continuous(labels = dollar_format()) +
  scale_fill_manual(values = c("Current" = "seagreen",
                              "1-30 Days" = "blue", 
                              "31-60 Days" = "yellow",
                              "61-90 Days" = "darkorange",
                              "Over 90 Days" = "red")) +
  labs(title = "Aging by Industry",
      x = NULL,
      y = NULL,
      fill = NULL) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to interactive plot
ggplotly(industry_aging, tooltip = c("x", "y")) |>
  layout(
    # Show data for all series when hovering over a date
    hovermode = "x unified"
  )

```

# Customer Analysis

## Row

### Top 10 Customers by Exposure

```{r}
#| label: top-customers

# Calculate top customers by total exposure
top_customers <- ar_data |>
  group_by(customer_name, credit_limit, risk_category) |>
  summarise(
    total_ar = sum(amount),
    invoice_count = n(),
    avg_days_overdue = round(mean(days_overdue), 0),
    .groups = "drop"
  ) |>
  mutate(
    credit_utilization = total_ar / credit_limit
  ) |>
  arrange(desc(total_ar)) |>
  select(
    Customer = customer_name,
    `Total AR` = total_ar,
    `Credit Limit` = credit_limit,
    `Utilization %` = credit_utilization,
    `Invoices` = invoice_count,
    `Avg Days Overdue` = avg_days_overdue,
    `Risk` = risk_category
  )

# Create interactive table
datatable(top_customers,
          options = list(pageLength = 10, dom = 'tip'),
          rownames = FALSE) |>
  formatCurrency(c("Total AR", "Credit Limit"), digits = 0) |>
  formatPercentage("Utilization %",  digits = 0) |>
  formatStyle("Risk",
              backgroundColor = styleEqual(c("Low", "Medium", "High"),
                                        c("#d4edda", "#fff3cd", "#f8d7da")))
```

## Row

### Customer Risk Matrix

```{r}
#| label: risk-matrix

# Create risk matrix scatter plot
risk_plot <- ar_data |>
  group_by(customer_name, risk_category) |>
  summarise(
    total_ar = sum(amount),
    avg_days_overdue = mean(days_overdue),
    .groups = "drop"
  ) |>
  ggplot(aes(x = avg_days_overdue, y = total_ar, 
            color = risk_category, 
            text = paste("Customer:", customer_name,
                        "<br>AR:", dollar(total_ar),
                        "<br>Avg Days Overdue:", round(avg_days_overdue, 0)))) +
  geom_point(size = 4, alpha = 0.7) +
  scale_y_continuous(labels = dollar_format()) +
  scale_color_manual(values = c("Low" = "#28a745",
                              "Medium" = "#ffc107",
                              "High" = "#dc3545")) +
  labs(title = "Customer Risk Matrix",
      x = "Average Days Overdue",
      y = "Total AR Amount",
      color = "Risk Category") 
  

# Convert to interactive plot
ggplotly(risk_plot, tooltip = "text")
```

### Credit Utilization Heat Map

```{r}
#| label: credit-utilization

# Calculate credit utilization by customer
utilization_plot <- ar_data |>
  group_by(customer_name, credit_limit, industry) |>
  summarise(total_ar = sum(amount), .groups = "drop") |>
  mutate(utilization = total_ar / credit_limit) |>
  ggplot(aes(x = utilization, y = reorder(customer_name, utilization),  fill = industry)) +
  geom_col() +
  geom_vline(xintercept = .80, linetype = "dashed", color = "red", size = 1) +
  scale_x_continuous(labels = percent_format()) +
  labs(title = "Credit Utilization by Customer",
      x = "Credit Utilization %",
      y = NULL,
      fill = NULL)

# Convert to interactive plot
ggplotly(utilization_plot, tooltip = c("x", "y"))
```

# Collection Performance

## Row

### Collection Metrics

```{r}
#| label: collection-metrics

# Simulate collection performance data
collection_data <- tribble(
  ~collector, ~assigned_amount, ~collected_amount, ~promises_made, ~promises_kept,
  "John Smith", 45000, 32000, 15, 12,
  "Jane Doe", 52000, 38000, 18, 14,
  "Bob Johnson", 38000, 28000, 12, 10,
  "Mary Williams", 41000, 35000, 16, 15
) |>
  mutate(
    collection_rate = round((collected_amount / assigned_amount) * 100, 1),
    promise_kept_rate = round((promises_kept / promises_made) * 100, 1)
  )

# Create collection performance table
collection_summary <- collection_data |>
  select(
    Collector = collector,
    `Assigned Amount` = assigned_amount,
    `Collected Amount` = collected_amount,
    `Collection Rate` = collection_rate,
    `Promises Made` = promises_made,
    `Promise Kept Rate` = promise_kept_rate
  )

# Display table
datatable(collection_summary,
          options = list(pageLength = 10, dom = 'tip'),
          rownames = FALSE) |>
  formatCurrency(c("Assigned Amount", "Collected Amount")) |>
  formatPercentage(c("Collection Rate", "Promise Kept Rate"), digits = 1)
```

## Row

### Collection Effectiveness by Collector

```{r}
#| label: collector-performance

# Create collector performance chart
collector_plot <- collection_data |>
  ggplot(aes(x = reorder(collector, collection_rate), y = collection_rate)) +
  geom_col(fill = "#17a2b8") +
  geom_text(aes(label = paste0(collection_rate, "%")), 
            hjust = -0.1) +
  coord_flip() +
  scale_y_continuous(limits = c(0, 100)) +
  labs(title = "Collection Rate by Collector",
       x = "Collector",
       y = "Collection Rate (%)") 

# Convert to interactive plot
ggplotly(collector_plot)
```

### Promise-to-Pay Tracking

```{r}
#| label: promise-tracking

# Create promise tracking chart
promise_plot <- collection_data |>
  select(collector, promises_made, promises_kept) |>
  pivot_longer(cols = c(promises_made, promises_kept),
               names_to = "type",
               values_to = "count") |>
  mutate(type = if_else(type == "promises_made", "Promises Made", "Promises Kept")) |>
  ggplot(aes(x = collector, y = count, fill = type)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("Promises Made" = "#6c757d", 
                              "Promises Kept" = "#28a745")) +
  labs(title = "Promise-to-Pay Tracking",
       x = "Collector",
       y = "Number of Promises",
       fill = "") +
  theme(legend.position = "bottom")

# Convert to interactive plot
ggplotly(promise_plot)
```

# Cash Flow Forecast

## Row

### Expected Collections by Week

```{r}
#| label: cash-flow-forecast

# Create weekly collection forecast
forecast_weeks <- seq(current_date, current_date + days(28), by = "week")

# Simulate collection probabilities based on aging
collection_forecast <- ar_data |>
  mutate(
    # Assign collection probability based on aging
    collection_probability = case_when(
      aging_bucket == "Current" ~ 0.95,
      aging_bucket == "1-30 Days" ~ 0.80,
      aging_bucket == "31-60 Days" ~ 0.60,
      aging_bucket == "61-90 Days" ~ 0.40,
      TRUE ~ 0.20
    ),
    # Estimate collection week
    expected_collection_week = case_when(
      aging_bucket == "Current" ~ 1,
      aging_bucket == "1-30 Days" ~ 2,
      aging_bucket == "31-60 Days" ~ 3,
      TRUE ~ 4
    ),
    expected_amount = amount * collection_probability
  ) |>
  group_by(expected_collection_week) |>
  summarise(
    expected_collections = sum(expected_amount),
    best_case = sum(amount),  # If all collected
    worst_case = sum(expected_amount * 0.5)  # Conservative estimate
  ) |>
  mutate(
    week_date = forecast_weeks[expected_collection_week]
  )

# Create forecast chart
forecast_plot <- collection_forecast |>
  ggplot(aes(x = week_date)) +
  geom_ribbon(aes(ymin = worst_case, ymax = best_case), 
              fill = "lightblue", alpha = 0.3) +
  geom_line(aes(y = expected_collections), 
            color = "darkblue", size = 2) +
  geom_point(aes(y = expected_collections), 
             color = "darkblue", size = 3) +
  scale_y_continuous(labels = dollar_format()) +
  scale_x_date(date_labels = "%b %d") +
  labs(title = "4-Week Collection Forecast",
       subtitle = "Expected collections with confidence band",
       x = "Week",
       y = "Expected Collections") 

# Convert to interactive plot
ggplotly(forecast_plot)
```

## Row

### Collection Probability by Aging

```{r}
#| label: collection-probability

# Create collection probability table
probability_table <- tribble(
  ~aging_bucket, ~probability, ~amount,
  "Current", 95, sum(ar_data$amount[ar_data$aging_bucket == "Current"]),
  "1-30 Days", 80, sum(ar_data$amount[ar_data$aging_bucket == "1-30 Days"]),
  "31-60 Days", 60, sum(ar_data$amount[ar_data$aging_bucket == "31-60 Days"]),
  "61-90 Days", 40, sum(ar_data$amount[ar_data$aging_bucket == "61-90 Days"]),
  "Over 90 Days", 20, sum(ar_data$amount[ar_data$aging_bucket == "Over 90 Days"])
) |>
  mutate(
    expected_collection = amount * (probability / 100),
    aging_bucket = factor(aging_bucket, 
                         levels = c("Current", "1-30 Days", "31-60 Days", 
                                   "61-90 Days", "Over 90 Days"))
  )

# Display probability table using gt
probability_table |>
  select(
    `Aging Bucket` = aging_bucket,
    `Outstanding Amount` = amount,
    `Collection Probability` = probability,
    `Expected Collection` = expected_collection
  ) |>
  gt() |>
  tab_header(
    title = "Collection Probability Analysis",
    subtitle = "Expected collections based on historical patterns"
  ) |>
  fmt_currency(
    columns = c(`Outstanding Amount`, `Expected Collection`),
    currency = "USD"
  ) |>
  fmt_percent(
    columns = `Collection Probability`,
    scale_values = FALSE,
    decimals = 0
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "#f8f9fa"),
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_fill(color = "#dc3545", alpha = 0.2),
    locations = cells_body(
      columns = everything(),
      rows = `Aging Bucket` == "Over 90 Days"
    )
  ) |>
  tab_style(
    style = cell_fill(color = "#28a745", alpha = 0.2),
    locations = cells_body(
      columns = everything(),
      rows = `Aging Bucket` == "Current"
    )
  ) |>
  grand_summary_rows(
    columns = c(`Outstanding Amount`, `Expected Collection`),
    fns = list(
      Total = ~sum(.)
    ),
    fmt = ~fmt_currency(., currency = "USD")
  ) |>
  tab_options(
    table.width = pct(100)
  )
```

# Historical Trends

## Row

### 12-Month DSO Trend

```{r}
#| label: dso-trend

# Create DSO trend chart
dso_plot <- historical_dso |>
  ggplot(aes(x = month, y = dso)) +
  geom_line(color = "#007bff", size = 2) +
  geom_point(color = "#007bff", size = 3) +
  geom_hline(yintercept = 45, linetype = "dashed", color = "red") +
  geom_smooth(method = "loess", se = FALSE, color = "gray", size = 1) +
  scale_x_date(date_labels = "%b") +
  scale_y_continuous(limits = c(35, 55)) +
  labs(title = "Days Sales Outstanding Trend",
       subtitle = "Red line indicates 45-day target",
       x = "Month",
       y = "DSO (Days)") 

# Convert to interactive plot
ggplotly(dso_plot)
```

### AR Balance Trend

```{r}
#| label: ar-balance-trend

# Create AR balance trend chart
balance_plot <- historical_dso |>
  ggplot(aes(x = month, y = ar_balance)) +
  geom_area(fill = "#17a2b8", alpha = 0.3) +
  geom_line(color = "#17a2b8", size = 2) +
  geom_point(color = "#17a2b8", size = 3) +
  scale_x_date(date_labels = "%b") +
  scale_y_continuous(labels = dollar_format()) +
  labs(title = "AR Balance Trend",
       x = "Month",
       y = "AR Balance") 

# Convert to interactive plot
ggplotly(balance_plot)
```

## Row

### Monthly Metrics Comparison

```{r}
#| label: monthly-comparison

# Create comparison table
monthly_comparison <- historical_dso |>
  mutate(
    month_name = format(month, "%B %Y"),
    dso_change = dso - lag(dso),
    balance_change = ar_balance - lag(ar_balance),
    balance_change_pct = round((balance_change / lag(ar_balance)) * 100, 1)
  ) |>
  select(
    Month = month_name,
    `DSO (Days)` = dso,
    `DSO Change` = dso_change,
    `AR Balance` = ar_balance,
    `Balance Change` = balance_change,
    `Change %` = balance_change_pct
  ) |>
  filter(!is.na(`DSO Change`))  # Remove first row with NA

# Display table
datatable(monthly_comparison,
          options = list(pageLength = 12, dom = 'tip'),
          rownames = FALSE) |>
  formatCurrency(c("AR Balance", "Balance Change")) |>
  formatPercentage("Change %", digits = 1) |>
  formatStyle("DSO Change",
              color = styleInterval(0, c("green", "red"))) |>
  formatStyle("Balance Change",
              color = styleInterval(0, c("green", "red")))
```

# Data Quality

## Row

### Data Completeness Check

```{r}
#| label: data-quality

# Check data quality
quality_check <- list(
  "Total Open Invoices" = nrow(ar_data),
  "Invoices with Missing Customer Info" = sum(is.na(ar_data$customer_name)),
  "Invoices with Missing Due Dates" = sum(is.na(ar_data$due_date)),
  "Invoices with Zero Amount" = sum(ar_data$amount == 0),
  "Invoices with Negative Amount" = sum(ar_data$amount < 0),
  "Data Last Updated" = format(current_date, "%B %d, %Y")
)

# Convert to table format
quality_df <- tibble(
  Metric = names(quality_check),
  Value = unlist(quality_check)
)

# Display quality check table using gt
quality_df |>
  gt() |>
  tab_header(
    title = "Data Quality Metrics",
    subtitle = "Completeness and accuracy checks"
  ) |>
  cols_align(
    align = "left",
    columns = Metric
  ) |>
  cols_align(
    align = "center",
    columns = Value
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "#f8f9fa"),
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_fill(color = "#d4edda"),
    locations = cells_body(
      columns = Value,
      rows = Value %in% c("0", "11")  # Highlight good values
    )
  ) |>
  tab_footnote(
    footnote = "Green indicates no data quality issues",
    locations = cells_body(
      columns = Value,
      rows = 2:5
    )
  ) |>
  tab_options(
    table.width = pct(100)
  )
```

### Data Validation Summary

```{r}
#| label: validation-summary

# Create validation summary
validation_results <- tribble(
  ~check, ~status, ~details,
  "Customer Credit Limits", "âœ“ Pass", "All customers have valid credit limits",
  "Invoice Dates", "âœ“ Pass", "All invoice dates are valid",
  "Aging Calculation", "âœ“ Pass", "Aging buckets calculated correctly",
  "Amount Validation", "âœ“ Pass", "All amounts are positive values",
  "Customer Matching", "âœ“ Pass", "All invoices matched to customers"
)

# Display validation table using gt
validation_results |>
  gt() |>
  tab_header(
    title = "Data Validation Summary",
    subtitle = "System integrity checks"
  ) |>
  cols_label(
    check = "Validation Check",
    status = "Status",
    details = "Details"
  ) |>
  cols_align(
    align = "center",
    columns = status
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "#f8f9fa"),
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "#d4edda"),
      cell_text(color = "#155724", weight = "bold")
    ),
    locations = cells_body(
      columns = status
    )
  ) |>
  tab_options(
    table.width = pct(100),
    column_labels.font.weight = "bold"
  )
```